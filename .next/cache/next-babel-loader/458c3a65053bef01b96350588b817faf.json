{"ast":null,"code":"/**\n * Base actions for work with store by selected reducer\n */\nexport default class BaseActions {\n  /** Select reducer\n  * @constructor\n  * @param reducer\n  */\n  constructor(reducer) {\n    this.reducer = reducer;\n  }\n  /**\n  * Set value to reducer\n  * @param {string|array} field\n  * @param {any} value\n  * @param {boolean} [isFromJS]\n  * @returns {function}\n  */\n\n\n  setValue(field, value, isFromJS = true) {\n    return this.callAction('set', {\n      field,\n      value,\n      isFromJS\n    });\n  }\n  /**\n  * Set multiple values\n  * @param {Object} payload\n  * @returns {Function}\n  */\n\n\n  setMultipleValue(payload) {\n    return this.callAction('setMultiple', payload);\n  }\n  /**\n   * set in\n   * @param {string} field\n   * @param {string} params\n   * @return {function(...[*]=)}\n   */\n\n\n  setIn(field, params) {\n    return this.callAction('setIn', {\n      field,\n      params\n    });\n  }\n  /**\n  * Reset reducer to default values\n  * @returns {Function}\n  */\n\n\n  clear() {\n    return this.callAction('clear');\n  }\n  /**\n  * Reset only one field in reducer to default values\n  * @param {String} field\n  * @returns {Function}\n  */\n\n\n  clearByField(field) {\n    return this.callAction('clearByField', {\n      field\n    });\n  }\n  /**\n  * Is exist reducer\n  * @returns {boolean}\n  * @private\n  */\n\n\n  isExistReducer() {\n    return !!this.reducer || !!this.reducer.actions;\n  }\n  /**\n  * Is exist called reducer action\n  * @param {String} name\n  * @returns {boolean}\n  * @private\n  */\n\n\n  isExistAction(name) {\n    return !!this.reducer.actions[name];\n  }\n  /**\n  * Call reducer action\n  * @param {String} action\n  * @param payload\n  * @returns {Function}\n  * @private\n  */\n\n\n  callAction(action, payload = undefined) {\n    if (!this.isExistReducer()) {\n      throw new Error('Reducer not found');\n    }\n\n    if (!this.isExistAction(action)) {\n      throw new Error(`Action \"${action}\" in reducer not found`);\n    }\n\n    return dispatch => {\n      dispatch(this.reducer.actions[action](payload));\n    };\n  }\n\n}","map":{"version":3,"names":["BaseActions","constructor","reducer","setValue","field","value","isFromJS","callAction","setMultipleValue","payload","setIn","params","clear","clearByField","isExistReducer","actions","isExistAction","name","action","undefined","Error","dispatch"],"sources":["/Volumes/Data/Work/Digitalax/PFPMint/src/actions/base-actions.js"],"sourcesContent":["/**\n * Base actions for work with store by selected reducer\n */\nexport default class BaseActions {\n\n  /** Select reducer\n  * @constructor\n  * @param reducer\n  */\n  constructor(reducer) {\n    this.reducer = reducer;\n  }\n\n  /**\n  * Set value to reducer\n  * @param {string|array} field\n  * @param {any} value\n  * @param {boolean} [isFromJS]\n  * @returns {function}\n  */\n  setValue(field, value, isFromJS = true) {\n    return this.callAction('set', { field, value, isFromJS });\n  }\n\n  /**\n  * Set multiple values\n  * @param {Object} payload\n  * @returns {Function}\n  */\n  setMultipleValue(payload) {\n    return this.callAction('setMultiple', payload);\n  }\n\n  /**\n   * set in\n   * @param {string} field\n   * @param {string} params\n   * @return {function(...[*]=)}\n   */\n  setIn(field, params) {\n    return this.callAction('setIn', { field, params });\n  }\n\n  /**\n  * Reset reducer to default values\n  * @returns {Function}\n  */\n  clear() {\n    return this.callAction('clear');\n  }\n\n  /**\n  * Reset only one field in reducer to default values\n  * @param {String} field\n  * @returns {Function}\n  */\n  clearByField(field) {\n    return this.callAction('clearByField', { field });\n  }\n\n  /**\n  * Is exist reducer\n  * @returns {boolean}\n  * @private\n  */\n  isExistReducer() {\n    return !!this.reducer || !!this.reducer.actions;\n  }\n\n  /**\n  * Is exist called reducer action\n  * @param {String} name\n  * @returns {boolean}\n  * @private\n  */\n  isExistAction(name) {\n    return !!this.reducer.actions[name];\n  }\n\n  /**\n  * Call reducer action\n  * @param {String} action\n  * @param payload\n  * @returns {Function}\n  * @private\n  */\n  callAction(action, payload = undefined) {\n    if (!this.isExistReducer()) {\n      throw new Error('Reducer not found');\n    }\n    if (!this.isExistAction(action)) {\n      throw new Error(`Action \"${action}\" in reducer not found`);\n    }\n    return (dispatch) => {\n      dispatch(this.reducer.actions[action](payload));\n    };\n  }\n\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,eAAe,MAAMA,WAAN,CAAkB;EAE/B;AACF;AACA;AACA;EACEC,WAAW,CAACC,OAAD,EAAU;IACnB,KAAKA,OAAL,GAAeA,OAAf;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEC,QAAQ,CAACC,KAAD,EAAQC,KAAR,EAAeC,QAAQ,GAAG,IAA1B,EAAgC;IACtC,OAAO,KAAKC,UAAL,CAAgB,KAAhB,EAAuB;MAAEH,KAAF;MAASC,KAAT;MAAgBC;IAAhB,CAAvB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEE,gBAAgB,CAACC,OAAD,EAAU;IACxB,OAAO,KAAKF,UAAL,CAAgB,aAAhB,EAA+BE,OAA/B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEC,KAAK,CAACN,KAAD,EAAQO,MAAR,EAAgB;IACnB,OAAO,KAAKJ,UAAL,CAAgB,OAAhB,EAAyB;MAAEH,KAAF;MAASO;IAAT,CAAzB,CAAP;EACD;EAED;AACF;AACA;AACA;;;EACEC,KAAK,GAAG;IACN,OAAO,KAAKL,UAAL,CAAgB,OAAhB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEM,YAAY,CAACT,KAAD,EAAQ;IAClB,OAAO,KAAKG,UAAL,CAAgB,cAAhB,EAAgC;MAAEH;IAAF,CAAhC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEU,cAAc,GAAG;IACf,OAAO,CAAC,CAAC,KAAKZ,OAAP,IAAkB,CAAC,CAAC,KAAKA,OAAL,CAAaa,OAAxC;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEC,aAAa,CAACC,IAAD,EAAO;IAClB,OAAO,CAAC,CAAC,KAAKf,OAAL,CAAaa,OAAb,CAAqBE,IAArB,CAAT;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEV,UAAU,CAACW,MAAD,EAAST,OAAO,GAAGU,SAAnB,EAA8B;IACtC,IAAI,CAAC,KAAKL,cAAL,EAAL,EAA4B;MAC1B,MAAM,IAAIM,KAAJ,CAAU,mBAAV,CAAN;IACD;;IACD,IAAI,CAAC,KAAKJ,aAAL,CAAmBE,MAAnB,CAAL,EAAiC;MAC/B,MAAM,IAAIE,KAAJ,CAAW,WAAUF,MAAO,wBAA5B,CAAN;IACD;;IACD,OAAQG,QAAD,IAAc;MACnBA,QAAQ,CAAC,KAAKnB,OAAL,CAAaa,OAAb,CAAqBG,MAArB,EAA6BT,OAA7B,CAAD,CAAR;IACD,CAFD;EAGD;;AA7F8B"},"metadata":{},"sourceType":"module"}