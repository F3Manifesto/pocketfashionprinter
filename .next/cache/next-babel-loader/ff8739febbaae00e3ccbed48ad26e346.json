{"ast":null,"code":"import { gql } from 'graphql-request';\nexport const getAuctionContracts = gql`\n  {\n    digitalaxAuctionContracts(first: 1000) {\n      id\n      minBidIncrement\n      bidWithdrawalLockTime\n      platformFee\n      platformFeeRecipient\n      totalSales\n    }\n  }\n`;\nexport const getDigitalaxGarmentNftV2GlobalStats = gql`\n  query digitalaxGarmentNFTV2GlobalStats {\n    digitalaxGarmentNFTV2GlobalStats(first: 1) {\n      id\n      monaPerEth\n    }\n  }\n`;\nexport const DIGITALAX_MARKETPLACE_V2_OFFER = gql`\n  query digitalaxMarketplaceV2Offers($garmentCollection: String!) {\n    digitalaxMarketplaceV2Offers(where: { garmentCollection: $garmentCollection }) {\n      id\n      primarySalePrice\n      startTime\n      endTime\n      amountSold\n      garmentCollection {\n        garments(first: 1000) {\n          id\n          owner\n        }\n      }\n    }\n  }\n`;\nexport const DIGITALAX_GARMENT_NFT_V2_GLOBAL_STATS = gql`\n  query digitalaxGarmentNFTV2GlobalStats {\n    digitalaxGarmentNFTV2GlobalStats(first: 1) {\n      id\n      monaPerEth\n    }\n  }\n`;\nexport const DIGITALAX_GARMENT_V2S = gql`\n  query digitalaxGarmentV2S($ids: [ID!]) {\n    digitalaxGarmentV2S(where: { id_in: $ids }) {\n      id\n      owner\n    }\n  }\n`;\nexport const PAYABLE_TOKEN_REQUEST = gql`\n  query payableTokenReport($id: ID) {\n    payableTokenReport(id: $id) {\n      id\n      payload\n      timestamp\n    }\n  }\n`; // For Profile Page\n// DIGITALAX GARMENTS (eth, polygon)\n\nexport const DIGITALAX_GARMENTS_BY_OWNER = gql`\n  query digitalaxGarments($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGarments(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      designer\n      tokenUri\n      image\n      animation\n      name\n      description\n    }\n  }\n`;\nexport const DIGITALAX_GARMENTS = gql`\n  query digitalaxGarments($ids: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGarments(first: $first, where: { id_in: $ids, id_gt: $lastID }) {\n      id\n      owner\n      designer\n      tokenUri\n      image\n      animation\n      name\n      description\n    }\n  }\n`; // (polygon only)\n\nexport const DIGITALAX_GARMENT_V2S_BY_OWNER = gql`\n  query digitalaxGarmentV2S($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGarmentV2S(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      designer\n      tokenUri\n      image\n      animation\n      name\n      description\n    }\n  }\n`; // (polygon digi bundle)\n\nexport const DIGITALAX_SUBSCRIPTIONS_BY_OWNER = gql`\n  query digitalaxSubscriptions($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxSubscriptions(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      name\n      owner\n      tokenUri\n      image\n      animation\n      designer\n    }\n  }\n`; // polygon digifizzy 1155\n\nexport const DIGITALAX_SUBSCRIPTION_COLLECTORS_BY_OWNER = gql`\n  query digitalaxSubscriptionCollectors($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxSubscriptionCollectors(first: $first, where: { id: $owner, id_gt: $lastID }) {\n      id\n      childrenOwned {\n        id\n        owner\n        amount\n        tokenUri\n        token {\n          id\n          image\n          animation\n          name\n          description\n          totalSupply\n          tokenUri\n        }\n      }\n    }\n  }\n`; // staked fashion NFTs polygon\n\nexport const DIGITALAX_NFT_STAKERS_BY_ADDRESS = gql`\n  query digitalaxNFTStakers($staker: ID!) {\n    digitalaxNFTStakers(where: { id: $staker }) {\n      id\n      garments {\n        id\n        owner\n        designer\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`; // staked fashion NFTs ethereum\n\nexport const DIGITALAX_GARMENT_STAKED_TOKENS_BY_ADDRESS = gql`\n  query digitalaxGarmentStakedTokens($staker: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGarmentStakedTokens(first: $first, where: { staker: $staker, id_gt: $lastID }) {\n      id\n      staker\n    }\n  }\n`; // genesis NFTs ethereum\n\nexport const DIGITALAX_GENESIS_NFTS_BY_ADDRESS = gql`\n  query digitalaxGenesisNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGenesisNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      name\n      description\n      image\n      animation\n      tokenUri\n    }\n  }\n`; // genesis NFTs by ids ethereum\n\nexport const DIGITALAX_GENESIS_NFTS = gql`\n  query digitalaxGenesisNFTs($ids: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGenesisNFTs(first: $first, where: { id_in: $ids, id_gt: $lastID }) {\n      id\n      owner\n      name\n      description\n      image\n      animation\n      tokenUri\n    }\n  }\n`; // staked genesis NFTs ethereum\n\nexport const DIGITALAX_GENESIS_STAKED_TOKENS_BY_ADDRESS = gql`\n  query digitalaxGenesisStakedTokens($staker: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGenesisStakedTokens(first: $first, where: { staker: $staker, id_gt: $lastID }) {\n      id\n      staker\n    }\n  }\n`; // get collection id by garment id polygon\n\nexport const DIGITALAX_GARMENT_V2_COLLECTION_BY_GARMENT_ID = gql`\n  query digitalaxGarmentV2Collections($garmentIDs: [ID!]) {\n    digitalaxGarmentV2Collections(where: { garments_contains: $garmentIDs }) {\n      id\n      rarity\n      garmentAuctionID\n    }\n  }\n`; // get pode tokens by owner\n\nexport const PODE_NFT_V2S_BY_ADDRESS = gql`\n  query podeNFTv2S($owner: ID!, $first: Int!, $lastID: ID!) {\n    podeNFTv2S(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      tokenUri\n      name\n      animation\n    }\n  }\n`; // get staked pode tokens by staker\n\nexport const PODE_NFT_V2_STAKERS_BY_ADDRESS = gql`\n  query podeNFTv2Stakers($staker: ID!, $first: Int!, $lastID: ID!) {\n    podeNFTv2Stakers(first: $first, where: { id: $staker, id_gt: $lastID }) {\n      id\n      garments {\n        id\n      }\n    }\n  }\n`; // polygon digitalax 1155\n\nexport const DIGITALAX_COLLETOR_V2_BY_OWNER = gql`\n  query digitalaxCollectorV2($owner: ID!) {\n    digitalaxCollectorV2(id: $owner) {\n      id\n      childrenOwned {\n        id\n        owner\n        amount\n        tokenUri\n        token {\n          id\n          image\n          animation\n          name\n          description\n          totalSupply\n          tokenUri\n        }\n      }\n    }\n  }\n`; // gdn membership token polygon\n\nexport const GDN_MEMBERSHIP_NFTS_BY_OWNER = gql`\n  query gdnmembershipNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    gdnmembershipNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      name\n      description\n      image\n      animation\n      tokenUri\n    }\n  }\n`; // digitalax look (loot for fashion) nfts mainnet\n\nexport const DIGITALAX_LOOK_NFTS_BY_OWNER = gql`\n  query digitalaxLookNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxLookNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      name\n      owner\n      background\n      texture\n      pattern\n      color\n      shape\n      flare\n      form\n      line\n      element\n      tokenUri\n    }\n  }\n`;\nexport const DIGITALAX_GARMENT_V2_COLLECTIONS = gql`\n  query digitalaxGarmentV2Collections($ids: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGarmentV2Collections(first: $first, where: { id_in: $ids, id_gt: $lastID }) {\n      id\n      garments(first: 1000) {\n        id\n      }\n    }\n  }\n`;\nexport const DIGITALAX_GARMENT_V2_COLLECTIONS_BY_GARMENT_IDS = gql`\n  query digitalaxGarmentV2Collections($garmentIDs: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGarmentV2Collections(first: $first, where: { id_gt: $lastID }) {\n      id\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\n        id\n        owner\n        designer\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`;\nexport const DIGITALAX_LOOK_GOLDEN_TICKETS_BY_OWNER = gql`\n  query digitalaxLookGoldenTickets($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxLookGoldenTickets(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      name\n      description\n      animation\n      image\n      owner\n      tokenUri\n    }\n  }\n`; // staked nfts by id list on polygon\n\nexport const DIGITALAX_NFT_STAKERS_BY_GARMENTS = gql`\n  query digitalaxNFTStakers($garmentIDs: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxNFTStakers(first: $first, where: { id_gt: $lastID }) {\n      id\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\n        id\n        owner\n        designer\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`; // whitelisted staked nfts on dlta by id list on polygon\n\nexport const GUILD_WHITELISTED_NFT_STAKERS_BY_GARMENTS = gql`\n  query guildWhitelistedNFTStakers($garmentIDs: [ID!], $first: Int!, $lastID: ID!) {\n    guildWhitelistedNFTStakers(first: $first, where: { id_gt: $lastID }) {\n      id\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\n        id\n        owner\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`; // get staked pode tokens by staker\n\nexport const GUILD_WHITELISTED_NFT_STAKERS_BY_STAKER = gql`\n  query guildWhitelistedNFTStakers($staker: ID!, $first: Int!, $lastID: ID!) {\n    guildWhitelistedNFTStakers(first: $first, where: { id: $staker, id_gt: $lastID }) {\n      id\n      garments {\n        id\n        owner\n        tokenAddress\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`;","map":{"version":3,"names":["gql","getAuctionContracts","getDigitalaxGarmentNftV2GlobalStats","DIGITALAX_MARKETPLACE_V2_OFFER","DIGITALAX_GARMENT_NFT_V2_GLOBAL_STATS","DIGITALAX_GARMENT_V2S","PAYABLE_TOKEN_REQUEST","DIGITALAX_GARMENTS_BY_OWNER","DIGITALAX_GARMENTS","DIGITALAX_GARMENT_V2S_BY_OWNER","DIGITALAX_SUBSCRIPTIONS_BY_OWNER","DIGITALAX_SUBSCRIPTION_COLLECTORS_BY_OWNER","DIGITALAX_NFT_STAKERS_BY_ADDRESS","DIGITALAX_GARMENT_STAKED_TOKENS_BY_ADDRESS","DIGITALAX_GENESIS_NFTS_BY_ADDRESS","DIGITALAX_GENESIS_NFTS","DIGITALAX_GENESIS_STAKED_TOKENS_BY_ADDRESS","DIGITALAX_GARMENT_V2_COLLECTION_BY_GARMENT_ID","PODE_NFT_V2S_BY_ADDRESS","PODE_NFT_V2_STAKERS_BY_ADDRESS","DIGITALAX_COLLETOR_V2_BY_OWNER","GDN_MEMBERSHIP_NFTS_BY_OWNER","DIGITALAX_LOOK_NFTS_BY_OWNER","DIGITALAX_GARMENT_V2_COLLECTIONS","DIGITALAX_GARMENT_V2_COLLECTIONS_BY_GARMENT_IDS","DIGITALAX_LOOK_GOLDEN_TICKETS_BY_OWNER","DIGITALAX_NFT_STAKERS_BY_GARMENTS","GUILD_WHITELISTED_NFT_STAKERS_BY_GARMENTS","GUILD_WHITELISTED_NFT_STAKERS_BY_STAKER"],"sources":["/Volumes/Data/Work/Digitalax/PFPMint/src/services/api/gql.apiService.js"],"sourcesContent":["import { gql } from 'graphql-request'\n\nexport const getAuctionContracts = gql`\n  {\n    digitalaxAuctionContracts(first: 1000) {\n      id\n      minBidIncrement\n      bidWithdrawalLockTime\n      platformFee\n      platformFeeRecipient\n      totalSales\n    }\n  }\n`\n\nexport const getDigitalaxGarmentNftV2GlobalStats = gql`\n  query digitalaxGarmentNFTV2GlobalStats {\n    digitalaxGarmentNFTV2GlobalStats(first: 1) {\n      id\n      monaPerEth\n    }\n  }\n`\n\nexport const DIGITALAX_MARKETPLACE_V2_OFFER = gql`\n  query digitalaxMarketplaceV2Offers($garmentCollection: String!) {\n    digitalaxMarketplaceV2Offers(where: { garmentCollection: $garmentCollection }) {\n      id\n      primarySalePrice\n      startTime\n      endTime\n      amountSold\n      garmentCollection {\n        garments(first: 1000) {\n          id\n          owner\n        }\n      }\n    }\n  }\n`\n\nexport const DIGITALAX_GARMENT_NFT_V2_GLOBAL_STATS = gql`\n  query digitalaxGarmentNFTV2GlobalStats {\n    digitalaxGarmentNFTV2GlobalStats(first: 1) {\n      id\n      monaPerEth\n    }\n  }\n`\n\nexport const DIGITALAX_GARMENT_V2S = gql`\n  query digitalaxGarmentV2S($ids: [ID!]) {\n    digitalaxGarmentV2S(where: { id_in: $ids }) {\n      id\n      owner\n    }\n  }\n`\n\nexport const PAYABLE_TOKEN_REQUEST = gql`\n  query payableTokenReport($id: ID) {\n    payableTokenReport(id: $id) {\n      id\n      payload\n      timestamp\n    }\n  }\n`\n\n// For Profile Page\n\n// DIGITALAX GARMENTS (eth, polygon)\nexport const DIGITALAX_GARMENTS_BY_OWNER = gql`\n  query digitalaxGarments($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGarments(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      designer\n      tokenUri\n      image\n      animation\n      name\n      description\n    }\n  }\n`\n\nexport const DIGITALAX_GARMENTS = gql`\n  query digitalaxGarments($ids: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGarments(first: $first, where: { id_in: $ids, id_gt: $lastID }) {\n      id\n      owner\n      designer\n      tokenUri\n      image\n      animation\n      name\n      description\n    }\n  }\n`\n\n// (polygon only)\nexport const DIGITALAX_GARMENT_V2S_BY_OWNER = gql`\n  query digitalaxGarmentV2S($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGarmentV2S(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      designer\n      tokenUri\n      image\n      animation\n      name\n      description\n    }\n  }\n`\n\n// (polygon digi bundle)\nexport const DIGITALAX_SUBSCRIPTIONS_BY_OWNER = gql`\n  query digitalaxSubscriptions($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxSubscriptions(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      name\n      owner\n      tokenUri\n      image\n      animation\n      designer\n    }\n  }\n`\n\n// polygon digifizzy 1155\nexport const DIGITALAX_SUBSCRIPTION_COLLECTORS_BY_OWNER = gql`\n  query digitalaxSubscriptionCollectors($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxSubscriptionCollectors(first: $first, where: { id: $owner, id_gt: $lastID }) {\n      id\n      childrenOwned {\n        id\n        owner\n        amount\n        tokenUri\n        token {\n          id\n          image\n          animation\n          name\n          description\n          totalSupply\n          tokenUri\n        }\n      }\n    }\n  }\n`\n\n// staked fashion NFTs polygon\nexport const DIGITALAX_NFT_STAKERS_BY_ADDRESS = gql`\n  query digitalaxNFTStakers($staker: ID!) {\n    digitalaxNFTStakers(where: { id: $staker }) {\n      id\n      garments {\n        id\n        owner\n        designer\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`\n\n// staked fashion NFTs ethereum\nexport const DIGITALAX_GARMENT_STAKED_TOKENS_BY_ADDRESS = gql`\n  query digitalaxGarmentStakedTokens($staker: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGarmentStakedTokens(first: $first, where: { staker: $staker, id_gt: $lastID }) {\n      id\n      staker\n    }\n  }\n`\n\n// genesis NFTs ethereum\nexport const DIGITALAX_GENESIS_NFTS_BY_ADDRESS = gql`\n  query digitalaxGenesisNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGenesisNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      name\n      description\n      image\n      animation\n      tokenUri\n    }\n  }\n`\n\n// genesis NFTs by ids ethereum\nexport const DIGITALAX_GENESIS_NFTS = gql`\n  query digitalaxGenesisNFTs($ids: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGenesisNFTs(first: $first, where: { id_in: $ids, id_gt: $lastID }) {\n      id\n      owner\n      name\n      description\n      image\n      animation\n      tokenUri\n    }\n  }\n`\n\n// staked genesis NFTs ethereum\nexport const DIGITALAX_GENESIS_STAKED_TOKENS_BY_ADDRESS = gql`\n  query digitalaxGenesisStakedTokens($staker: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGenesisStakedTokens(first: $first, where: { staker: $staker, id_gt: $lastID }) {\n      id\n      staker\n    }\n  }\n`\n\n// get collection id by garment id polygon\nexport const DIGITALAX_GARMENT_V2_COLLECTION_BY_GARMENT_ID = gql`\n  query digitalaxGarmentV2Collections($garmentIDs: [ID!]) {\n    digitalaxGarmentV2Collections(where: { garments_contains: $garmentIDs }) {\n      id\n      rarity\n      garmentAuctionID\n    }\n  }\n`\n\n// get pode tokens by owner\nexport const PODE_NFT_V2S_BY_ADDRESS = gql`\n  query podeNFTv2S($owner: ID!, $first: Int!, $lastID: ID!) {\n    podeNFTv2S(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      tokenUri\n      name\n      animation\n    }\n  }\n`\n\n// get staked pode tokens by staker\nexport const PODE_NFT_V2_STAKERS_BY_ADDRESS = gql`\n  query podeNFTv2Stakers($staker: ID!, $first: Int!, $lastID: ID!) {\n    podeNFTv2Stakers(first: $first, where: { id: $staker, id_gt: $lastID }) {\n      id\n      garments {\n        id\n      }\n    }\n  }\n`\n\n// polygon digitalax 1155\nexport const DIGITALAX_COLLETOR_V2_BY_OWNER = gql`\n  query digitalaxCollectorV2($owner: ID!) {\n    digitalaxCollectorV2(id: $owner) {\n      id\n      childrenOwned {\n        id\n        owner\n        amount\n        tokenUri\n        token {\n          id\n          image\n          animation\n          name\n          description\n          totalSupply\n          tokenUri\n        }\n      }\n    }\n  }\n`\n\n// gdn membership token polygon\nexport const GDN_MEMBERSHIP_NFTS_BY_OWNER = gql`\n  query gdnmembershipNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    gdnmembershipNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      name\n      description\n      image\n      animation\n      tokenUri\n    }\n  }\n`\n\n// digitalax look (loot for fashion) nfts mainnet\nexport const DIGITALAX_LOOK_NFTS_BY_OWNER = gql`\n  query digitalaxLookNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxLookNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      name\n      owner\n      background\n      texture\n      pattern\n      color\n      shape\n      flare\n      form\n      line\n      element\n      tokenUri\n    }\n  }\n`\n\nexport const DIGITALAX_GARMENT_V2_COLLECTIONS = gql`\n  query digitalaxGarmentV2Collections($ids: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGarmentV2Collections(first: $first, where: { id_in: $ids, id_gt: $lastID }) {\n      id\n      garments(first: 1000) {\n        id\n      }\n    }\n  }\n`\n\nexport const DIGITALAX_GARMENT_V2_COLLECTIONS_BY_GARMENT_IDS = gql`\n  query digitalaxGarmentV2Collections($garmentIDs: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGarmentV2Collections(first: $first, where: { id_gt: $lastID }) {\n      id\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\n        id\n        owner\n        designer\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`\n\nexport const DIGITALAX_LOOK_GOLDEN_TICKETS_BY_OWNER = gql`\n  query digitalaxLookGoldenTickets($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxLookGoldenTickets(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      name\n      description\n      animation\n      image\n      owner\n      tokenUri\n    }\n  }\n`\n\n// staked nfts by id list on polygon\nexport const DIGITALAX_NFT_STAKERS_BY_GARMENTS = gql`\n  query digitalaxNFTStakers($garmentIDs: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxNFTStakers(first: $first, where: { id_gt: $lastID }) {\n      id\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\n        id\n        owner\n        designer\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`\n\n// whitelisted staked nfts on dlta by id list on polygon\nexport const GUILD_WHITELISTED_NFT_STAKERS_BY_GARMENTS = gql`\n  query guildWhitelistedNFTStakers($garmentIDs: [ID!], $first: Int!, $lastID: ID!) {\n    guildWhitelistedNFTStakers(first: $first, where: { id_gt: $lastID }) {\n      id\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\n        id\n        owner\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`\n\n// get staked pode tokens by staker\nexport const GUILD_WHITELISTED_NFT_STAKERS_BY_STAKER = gql`\n  query guildWhitelistedNFTStakers($staker: ID!, $first: Int!, $lastID: ID!) {\n    guildWhitelistedNFTStakers(first: $first, where: { id: $staker, id_gt: $lastID }) {\n      id\n      garments {\n        id\n        owner\n        tokenAddress\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,iBAApB;AAEA,OAAO,MAAMC,mBAAmB,GAAGD,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXO;AAaP,OAAO,MAAME,mCAAmC,GAAGF,GAAI;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,CAPO;AASP,OAAO,MAAMG,8BAA8B,GAAGH,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBO;AAkBP,OAAO,MAAMI,qCAAqC,GAAGJ,GAAI;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,CAPO;AASP,OAAO,MAAMK,qBAAqB,GAAGL,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,CAPO;AASP,OAAO,MAAMM,qBAAqB,GAAGN,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO,C,CAUP;AAEA;;AACA,OAAO,MAAMO,2BAA2B,GAAGP,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbO;AAeP,OAAO,MAAMQ,kBAAkB,GAAGR,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbO,C,CAeP;;AACA,OAAO,MAAMS,8BAA8B,GAAGT,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbO,C,CAeP;;AACA,OAAO,MAAMU,gCAAgC,GAAGV,GAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZO,C,CAcP;;AACA,OAAO,MAAMW,0CAA0C,GAAGX,GAAI;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBO,C,CAuBP;;AACA,OAAO,MAAMY,gCAAgC,GAAGZ,GAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBO,C,CAkBP;;AACA,OAAO,MAAMa,0CAA0C,GAAGb,GAAI;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,CAPO,C,CASP;;AACA,OAAO,MAAMc,iCAAiC,GAAGd,GAAI;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZO,C,CAcP;;AACA,OAAO,MAAMe,sBAAsB,GAAGf,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZO,C,CAcP;;AACA,OAAO,MAAMgB,0CAA0C,GAAGhB,GAAI;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,CAPO,C,CASP;;AACA,OAAO,MAAMiB,6CAA6C,GAAGjB,GAAI;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO,C,CAUP;;AACA,OAAO,MAAMkB,uBAAuB,GAAGlB,GAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVO,C,CAYP;;AACA,OAAO,MAAMmB,8BAA8B,GAAGnB,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATO,C,CAWP;;AACA,OAAO,MAAMoB,8BAA8B,GAAGpB,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBO,C,CAuBP;;AACA,OAAO,MAAMqB,4BAA4B,GAAGrB,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZO,C,CAcP;;AACA,OAAO,MAAMsB,4BAA4B,GAAGtB,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBO;AAoBP,OAAO,MAAMuB,gCAAgC,GAAGvB,GAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATO;AAWP,OAAO,MAAMwB,+CAA+C,GAAGxB,GAAI;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBO;AAkBP,OAAO,MAAMyB,sCAAsC,GAAGzB,GAAI;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZO,C,CAcP;;AACA,OAAO,MAAM0B,iCAAiC,GAAG1B,GAAI;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBO,C,CAkBP;;AACA,OAAO,MAAM2B,yCAAyC,GAAG3B,GAAI;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfO,C,CAiBP;;AACA,OAAO,MAAM4B,uCAAuC,GAAG5B,GAAI;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBO"},"metadata":{},"sourceType":"module"}