{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28;\n\nimport { gql } from 'graphql-request';\nexport var getAuctionContracts = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  {\\n    digitalaxAuctionContracts(first: 1000) {\\n      id\\n      minBidIncrement\\n      bidWithdrawalLockTime\\n      platformFee\\n      platformFeeRecipient\\n      totalSales\\n    }\\n  }\\n\"])));\nexport var getDigitalaxGarmentNftV2GlobalStats = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  query digitalaxGarmentNFTV2GlobalStats {\\n    digitalaxGarmentNFTV2GlobalStats(first: 1) {\\n      id\\n      monaPerEth\\n    }\\n  }\\n\"])));\nexport var DIGITALAX_MARKETPLACE_V2_OFFER = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n  query digitalaxMarketplaceV2Offers($garmentCollection: String!) {\\n    digitalaxMarketplaceV2Offers(where: { garmentCollection: $garmentCollection }) {\\n      id\\n      primarySalePrice\\n      startTime\\n      endTime\\n      amountSold\\n      garmentCollection {\\n        garments(first: 1000) {\\n          id\\n          owner\\n        }\\n      }\\n    }\\n  }\\n\"])));\nexport var DIGITALAX_GARMENT_NFT_V2_GLOBAL_STATS = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n  query digitalaxGarmentNFTV2GlobalStats {\\n    digitalaxGarmentNFTV2GlobalStats(first: 1) {\\n      id\\n      monaPerEth\\n    }\\n  }\\n\"])));\nexport var DIGITALAX_GARMENT_V2S = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n  query digitalaxGarmentV2S($ids: [ID!]) {\\n    digitalaxGarmentV2S(where: { id_in: $ids }) {\\n      id\\n      owner\\n    }\\n  }\\n\"])));\nexport var PAYABLE_TOKEN_REQUEST = gql(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\\n  query payableTokenReport($id: ID) {\\n    payableTokenReport(id: $id) {\\n      id\\n      payload\\n      timestamp\\n    }\\n  }\\n\"]))); // For Profile Page\n// DIGITALAX GARMENTS (eth, polygon)\n\nexport var DIGITALAX_GARMENTS_BY_OWNER = gql(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\\n  query digitalaxGarments($owner: ID!, $first: Int!, $lastID: ID!) {\\n    digitalaxGarments(first: $first, where: { owner: $owner, id_gt: $lastID }) {\\n      id\\n      owner\\n      designer\\n      tokenUri\\n      image\\n      animation\\n      name\\n      description\\n    }\\n  }\\n\"])));\nexport var DIGITALAX_GARMENTS = gql(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\\n  query digitalaxGarments($ids: [ID!], $first: Int!, $lastID: ID!) {\\n    digitalaxGarments(first: $first, where: { id_in: $ids, id_gt: $lastID }) {\\n      id\\n      owner\\n      designer\\n      tokenUri\\n      image\\n      animation\\n      name\\n      description\\n    }\\n  }\\n\"]))); // (polygon only)\n\nexport var DIGITALAX_GARMENT_V2S_BY_OWNER = gql(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"\\n  query digitalaxGarmentV2S($owner: ID!, $first: Int!, $lastID: ID!) {\\n    digitalaxGarmentV2S(first: $first, where: { owner: $owner, id_gt: $lastID }) {\\n      id\\n      owner\\n      designer\\n      tokenUri\\n      image\\n      animation\\n      name\\n      description\\n    }\\n  }\\n\"]))); // (polygon digi bundle)\n\nexport var DIGITALAX_SUBSCRIPTIONS_BY_OWNER = gql(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"\\n  query digitalaxSubscriptions($owner: ID!, $first: Int!, $lastID: ID!) {\\n    digitalaxSubscriptions(first: $first, where: { owner: $owner, id_gt: $lastID }) {\\n      id\\n      name\\n      owner\\n      tokenUri\\n      image\\n      animation\\n      designer\\n    }\\n  }\\n\"]))); // polygon digifizzy 1155\n\nexport var DIGITALAX_SUBSCRIPTION_COLLECTORS_BY_OWNER = gql(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([\"\\n  query digitalaxSubscriptionCollectors($owner: ID!, $first: Int!, $lastID: ID!) {\\n    digitalaxSubscriptionCollectors(first: $first, where: { id: $owner, id_gt: $lastID }) {\\n      id\\n      childrenOwned {\\n        id\\n        owner\\n        amount\\n        tokenUri\\n        token {\\n          id\\n          image\\n          animation\\n          name\\n          description\\n          totalSupply\\n          tokenUri\\n        }\\n      }\\n    }\\n  }\\n\"]))); // staked fashion NFTs polygon\n\nexport var DIGITALAX_NFT_STAKERS_BY_ADDRESS = gql(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([\"\\n  query digitalaxNFTStakers($staker: ID!) {\\n    digitalaxNFTStakers(where: { id: $staker }) {\\n      id\\n      garments {\\n        id\\n        owner\\n        designer\\n        tokenUri\\n        image\\n        animation\\n        name\\n        description\\n      }\\n    }\\n  }\\n\"]))); // staked fashion NFTs ethereum\n\nexport var DIGITALAX_GARMENT_STAKED_TOKENS_BY_ADDRESS = gql(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral([\"\\n  query digitalaxGarmentStakedTokens($staker: ID!, $first: Int!, $lastID: ID!) {\\n    digitalaxGarmentStakedTokens(first: $first, where: { staker: $staker, id_gt: $lastID }) {\\n      id\\n      staker\\n    }\\n  }\\n\"]))); // genesis NFTs ethereum\n\nexport var DIGITALAX_GENESIS_NFTS_BY_ADDRESS = gql(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral([\"\\n  query digitalaxGenesisNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\\n    digitalaxGenesisNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\\n      id\\n      owner\\n      name\\n      description\\n      image\\n      animation\\n      tokenUri\\n    }\\n  }\\n\"]))); // genesis NFTs by ids ethereum\n\nexport var DIGITALAX_GENESIS_NFTS = gql(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral([\"\\n  query digitalaxGenesisNFTs($ids: [ID!], $first: Int!, $lastID: ID!) {\\n    digitalaxGenesisNFTs(first: $first, where: { id_in: $ids, id_gt: $lastID }) {\\n      id\\n      owner\\n      name\\n      description\\n      image\\n      animation\\n      tokenUri\\n    }\\n  }\\n\"]))); // staked genesis NFTs ethereum\n\nexport var DIGITALAX_GENESIS_STAKED_TOKENS_BY_ADDRESS = gql(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral([\"\\n  query digitalaxGenesisStakedTokens($staker: ID!, $first: Int!, $lastID: ID!) {\\n    digitalaxGenesisStakedTokens(first: $first, where: { staker: $staker, id_gt: $lastID }) {\\n      id\\n      staker\\n    }\\n  }\\n\"]))); // get collection id by garment id polygon\n\nexport var DIGITALAX_GARMENT_V2_COLLECTION_BY_GARMENT_ID = gql(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral([\"\\n  query digitalaxGarmentV2Collections($garmentIDs: [ID!]) {\\n    digitalaxGarmentV2Collections(where: { garments_contains: $garmentIDs }) {\\n      id\\n      rarity\\n      garmentAuctionID\\n    }\\n  }\\n\"]))); // get pode tokens by owner\n\nexport var PODE_NFT_V2S_BY_ADDRESS = gql(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral([\"\\n  query podeNFTv2S($owner: ID!, $first: Int!, $lastID: ID!) {\\n    podeNFTv2S(first: $first, where: { owner: $owner, id_gt: $lastID }) {\\n      id\\n      owner\\n      tokenUri\\n      name\\n      animation\\n    }\\n  }\\n\"]))); // get staked pode tokens by staker\n\nexport var PODE_NFT_V2_STAKERS_BY_ADDRESS = gql(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral([\"\\n  query podeNFTv2Stakers($staker: ID!, $first: Int!, $lastID: ID!) {\\n    podeNFTv2Stakers(first: $first, where: { id: $staker, id_gt: $lastID }) {\\n      id\\n      garments {\\n        id\\n      }\\n    }\\n  }\\n\"]))); // polygon digitalax 1155\n\nexport var DIGITALAX_COLLETOR_V2_BY_OWNER = gql(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral([\"\\n  query digitalaxCollectorV2($owner: ID!) {\\n    digitalaxCollectorV2(id: $owner) {\\n      id\\n      childrenOwned {\\n        id\\n        owner\\n        amount\\n        tokenUri\\n        token {\\n          id\\n          image\\n          animation\\n          name\\n          description\\n          totalSupply\\n          tokenUri\\n        }\\n      }\\n    }\\n  }\\n\"]))); // gdn membership token polygon\n\nexport var GDN_MEMBERSHIP_NFTS_BY_OWNER = gql(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral([\"\\n  query gdnmembershipNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\\n    gdnmembershipNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\\n      id\\n      owner\\n      name\\n      description\\n      image\\n      animation\\n      tokenUri\\n    }\\n  }\\n\"]))); // digitalax look (loot for fashion) nfts mainnet\n\nexport var DIGITALAX_LOOK_NFTS_BY_OWNER = gql(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral([\"\\n  query digitalaxLookNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\\n    digitalaxLookNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\\n      id\\n      name\\n      owner\\n      background\\n      texture\\n      pattern\\n      color\\n      shape\\n      flare\\n      form\\n      line\\n      element\\n      tokenUri\\n    }\\n  }\\n\"])));\nexport var DIGITALAX_GARMENT_V2_COLLECTIONS = gql(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral([\"\\n  query digitalaxGarmentV2Collections($ids: [ID!], $first: Int!, $lastID: ID!) {\\n    digitalaxGarmentV2Collections(first: $first, where: { id_in: $ids, id_gt: $lastID }) {\\n      id\\n      garments(first: 1000) {\\n        id\\n      }\\n    }\\n  }\\n\"])));\nexport var DIGITALAX_GARMENT_V2_COLLECTIONS_BY_GARMENT_IDS = gql(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral([\"\\n  query digitalaxGarmentV2Collections($garmentIDs: [ID!], $first: Int!, $lastID: ID!) {\\n    digitalaxGarmentV2Collections(first: $first, where: { id_gt: $lastID }) {\\n      id\\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\\n        id\\n        owner\\n        designer\\n        tokenUri\\n        image\\n        animation\\n        name\\n        description\\n      }\\n    }\\n  }\\n\"])));\nexport var DIGITALAX_LOOK_GOLDEN_TICKETS_BY_OWNER = gql(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral([\"\\n  query digitalaxLookGoldenTickets($owner: ID!, $first: Int!, $lastID: ID!) {\\n    digitalaxLookGoldenTickets(first: $first, where: { owner: $owner, id_gt: $lastID }) {\\n      id\\n      name\\n      description\\n      animation\\n      image\\n      owner\\n      tokenUri\\n    }\\n  }\\n\"]))); // staked nfts by id list on polygon\n\nexport var DIGITALAX_NFT_STAKERS_BY_GARMENTS = gql(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral([\"\\n  query digitalaxNFTStakers($garmentIDs: [ID!], $first: Int!, $lastID: ID!) {\\n    digitalaxNFTStakers(first: $first, where: { id_gt: $lastID }) {\\n      id\\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\\n        id\\n        owner\\n        designer\\n        tokenUri\\n        image\\n        animation\\n        name\\n        description\\n      }\\n    }\\n  }\\n\"]))); // whitelisted staked nfts on dlta by id list on polygon\n\nexport var GUILD_WHITELISTED_NFT_STAKERS_BY_GARMENTS = gql(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral([\"\\n  query guildWhitelistedNFTStakers($garmentIDs: [ID!], $first: Int!, $lastID: ID!) {\\n    guildWhitelistedNFTStakers(first: $first, where: { id_gt: $lastID }) {\\n      id\\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\\n        id\\n        owner\\n        tokenUri\\n        image\\n        animation\\n        name\\n        description\\n      }\\n    }\\n  }\\n\"]))); // get staked pode tokens by staker\n\nexport var GUILD_WHITELISTED_NFT_STAKERS_BY_STAKER = gql(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral([\"\\n  query guildWhitelistedNFTStakers($staker: ID!, $first: Int!, $lastID: ID!) {\\n    guildWhitelistedNFTStakers(first: $first, where: { id: $staker, id_gt: $lastID }) {\\n      id\\n      garments {\\n        id\\n        owner\\n        tokenAddress\\n        tokenUri\\n        image\\n        animation\\n        name\\n        description\\n      }\\n    }\\n  }\\n\"])));","map":{"version":3,"names":["gql","getAuctionContracts","getDigitalaxGarmentNftV2GlobalStats","DIGITALAX_MARKETPLACE_V2_OFFER","DIGITALAX_GARMENT_NFT_V2_GLOBAL_STATS","DIGITALAX_GARMENT_V2S","PAYABLE_TOKEN_REQUEST","DIGITALAX_GARMENTS_BY_OWNER","DIGITALAX_GARMENTS","DIGITALAX_GARMENT_V2S_BY_OWNER","DIGITALAX_SUBSCRIPTIONS_BY_OWNER","DIGITALAX_SUBSCRIPTION_COLLECTORS_BY_OWNER","DIGITALAX_NFT_STAKERS_BY_ADDRESS","DIGITALAX_GARMENT_STAKED_TOKENS_BY_ADDRESS","DIGITALAX_GENESIS_NFTS_BY_ADDRESS","DIGITALAX_GENESIS_NFTS","DIGITALAX_GENESIS_STAKED_TOKENS_BY_ADDRESS","DIGITALAX_GARMENT_V2_COLLECTION_BY_GARMENT_ID","PODE_NFT_V2S_BY_ADDRESS","PODE_NFT_V2_STAKERS_BY_ADDRESS","DIGITALAX_COLLETOR_V2_BY_OWNER","GDN_MEMBERSHIP_NFTS_BY_OWNER","DIGITALAX_LOOK_NFTS_BY_OWNER","DIGITALAX_GARMENT_V2_COLLECTIONS","DIGITALAX_GARMENT_V2_COLLECTIONS_BY_GARMENT_IDS","DIGITALAX_LOOK_GOLDEN_TICKETS_BY_OWNER","DIGITALAX_NFT_STAKERS_BY_GARMENTS","GUILD_WHITELISTED_NFT_STAKERS_BY_GARMENTS","GUILD_WHITELISTED_NFT_STAKERS_BY_STAKER"],"sources":["/Volumes/Data/Work/Digitalax/PFPMint/src/services/api/gql.apiService.js"],"sourcesContent":["import { gql } from 'graphql-request'\n\nexport const getAuctionContracts = gql`\n  {\n    digitalaxAuctionContracts(first: 1000) {\n      id\n      minBidIncrement\n      bidWithdrawalLockTime\n      platformFee\n      platformFeeRecipient\n      totalSales\n    }\n  }\n`\n\nexport const getDigitalaxGarmentNftV2GlobalStats = gql`\n  query digitalaxGarmentNFTV2GlobalStats {\n    digitalaxGarmentNFTV2GlobalStats(first: 1) {\n      id\n      monaPerEth\n    }\n  }\n`\n\nexport const DIGITALAX_MARKETPLACE_V2_OFFER = gql`\n  query digitalaxMarketplaceV2Offers($garmentCollection: String!) {\n    digitalaxMarketplaceV2Offers(where: { garmentCollection: $garmentCollection }) {\n      id\n      primarySalePrice\n      startTime\n      endTime\n      amountSold\n      garmentCollection {\n        garments(first: 1000) {\n          id\n          owner\n        }\n      }\n    }\n  }\n`\n\nexport const DIGITALAX_GARMENT_NFT_V2_GLOBAL_STATS = gql`\n  query digitalaxGarmentNFTV2GlobalStats {\n    digitalaxGarmentNFTV2GlobalStats(first: 1) {\n      id\n      monaPerEth\n    }\n  }\n`\n\nexport const DIGITALAX_GARMENT_V2S = gql`\n  query digitalaxGarmentV2S($ids: [ID!]) {\n    digitalaxGarmentV2S(where: { id_in: $ids }) {\n      id\n      owner\n    }\n  }\n`\n\nexport const PAYABLE_TOKEN_REQUEST = gql`\n  query payableTokenReport($id: ID) {\n    payableTokenReport(id: $id) {\n      id\n      payload\n      timestamp\n    }\n  }\n`\n\n// For Profile Page\n\n// DIGITALAX GARMENTS (eth, polygon)\nexport const DIGITALAX_GARMENTS_BY_OWNER = gql`\n  query digitalaxGarments($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGarments(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      designer\n      tokenUri\n      image\n      animation\n      name\n      description\n    }\n  }\n`\n\nexport const DIGITALAX_GARMENTS = gql`\n  query digitalaxGarments($ids: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGarments(first: $first, where: { id_in: $ids, id_gt: $lastID }) {\n      id\n      owner\n      designer\n      tokenUri\n      image\n      animation\n      name\n      description\n    }\n  }\n`\n\n// (polygon only)\nexport const DIGITALAX_GARMENT_V2S_BY_OWNER = gql`\n  query digitalaxGarmentV2S($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGarmentV2S(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      designer\n      tokenUri\n      image\n      animation\n      name\n      description\n    }\n  }\n`\n\n// (polygon digi bundle)\nexport const DIGITALAX_SUBSCRIPTIONS_BY_OWNER = gql`\n  query digitalaxSubscriptions($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxSubscriptions(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      name\n      owner\n      tokenUri\n      image\n      animation\n      designer\n    }\n  }\n`\n\n// polygon digifizzy 1155\nexport const DIGITALAX_SUBSCRIPTION_COLLECTORS_BY_OWNER = gql`\n  query digitalaxSubscriptionCollectors($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxSubscriptionCollectors(first: $first, where: { id: $owner, id_gt: $lastID }) {\n      id\n      childrenOwned {\n        id\n        owner\n        amount\n        tokenUri\n        token {\n          id\n          image\n          animation\n          name\n          description\n          totalSupply\n          tokenUri\n        }\n      }\n    }\n  }\n`\n\n// staked fashion NFTs polygon\nexport const DIGITALAX_NFT_STAKERS_BY_ADDRESS = gql`\n  query digitalaxNFTStakers($staker: ID!) {\n    digitalaxNFTStakers(where: { id: $staker }) {\n      id\n      garments {\n        id\n        owner\n        designer\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`\n\n// staked fashion NFTs ethereum\nexport const DIGITALAX_GARMENT_STAKED_TOKENS_BY_ADDRESS = gql`\n  query digitalaxGarmentStakedTokens($staker: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGarmentStakedTokens(first: $first, where: { staker: $staker, id_gt: $lastID }) {\n      id\n      staker\n    }\n  }\n`\n\n// genesis NFTs ethereum\nexport const DIGITALAX_GENESIS_NFTS_BY_ADDRESS = gql`\n  query digitalaxGenesisNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGenesisNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      name\n      description\n      image\n      animation\n      tokenUri\n    }\n  }\n`\n\n// genesis NFTs by ids ethereum\nexport const DIGITALAX_GENESIS_NFTS = gql`\n  query digitalaxGenesisNFTs($ids: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGenesisNFTs(first: $first, where: { id_in: $ids, id_gt: $lastID }) {\n      id\n      owner\n      name\n      description\n      image\n      animation\n      tokenUri\n    }\n  }\n`\n\n// staked genesis NFTs ethereum\nexport const DIGITALAX_GENESIS_STAKED_TOKENS_BY_ADDRESS = gql`\n  query digitalaxGenesisStakedTokens($staker: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGenesisStakedTokens(first: $first, where: { staker: $staker, id_gt: $lastID }) {\n      id\n      staker\n    }\n  }\n`\n\n// get collection id by garment id polygon\nexport const DIGITALAX_GARMENT_V2_COLLECTION_BY_GARMENT_ID = gql`\n  query digitalaxGarmentV2Collections($garmentIDs: [ID!]) {\n    digitalaxGarmentV2Collections(where: { garments_contains: $garmentIDs }) {\n      id\n      rarity\n      garmentAuctionID\n    }\n  }\n`\n\n// get pode tokens by owner\nexport const PODE_NFT_V2S_BY_ADDRESS = gql`\n  query podeNFTv2S($owner: ID!, $first: Int!, $lastID: ID!) {\n    podeNFTv2S(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      tokenUri\n      name\n      animation\n    }\n  }\n`\n\n// get staked pode tokens by staker\nexport const PODE_NFT_V2_STAKERS_BY_ADDRESS = gql`\n  query podeNFTv2Stakers($staker: ID!, $first: Int!, $lastID: ID!) {\n    podeNFTv2Stakers(first: $first, where: { id: $staker, id_gt: $lastID }) {\n      id\n      garments {\n        id\n      }\n    }\n  }\n`\n\n// polygon digitalax 1155\nexport const DIGITALAX_COLLETOR_V2_BY_OWNER = gql`\n  query digitalaxCollectorV2($owner: ID!) {\n    digitalaxCollectorV2(id: $owner) {\n      id\n      childrenOwned {\n        id\n        owner\n        amount\n        tokenUri\n        token {\n          id\n          image\n          animation\n          name\n          description\n          totalSupply\n          tokenUri\n        }\n      }\n    }\n  }\n`\n\n// gdn membership token polygon\nexport const GDN_MEMBERSHIP_NFTS_BY_OWNER = gql`\n  query gdnmembershipNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    gdnmembershipNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      name\n      description\n      image\n      animation\n      tokenUri\n    }\n  }\n`\n\n// digitalax look (loot for fashion) nfts mainnet\nexport const DIGITALAX_LOOK_NFTS_BY_OWNER = gql`\n  query digitalaxLookNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxLookNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      name\n      owner\n      background\n      texture\n      pattern\n      color\n      shape\n      flare\n      form\n      line\n      element\n      tokenUri\n    }\n  }\n`\n\nexport const DIGITALAX_GARMENT_V2_COLLECTIONS = gql`\n  query digitalaxGarmentV2Collections($ids: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGarmentV2Collections(first: $first, where: { id_in: $ids, id_gt: $lastID }) {\n      id\n      garments(first: 1000) {\n        id\n      }\n    }\n  }\n`\n\nexport const DIGITALAX_GARMENT_V2_COLLECTIONS_BY_GARMENT_IDS = gql`\n  query digitalaxGarmentV2Collections($garmentIDs: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGarmentV2Collections(first: $first, where: { id_gt: $lastID }) {\n      id\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\n        id\n        owner\n        designer\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`\n\nexport const DIGITALAX_LOOK_GOLDEN_TICKETS_BY_OWNER = gql`\n  query digitalaxLookGoldenTickets($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxLookGoldenTickets(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      name\n      description\n      animation\n      image\n      owner\n      tokenUri\n    }\n  }\n`\n\n// staked nfts by id list on polygon\nexport const DIGITALAX_NFT_STAKERS_BY_GARMENTS = gql`\n  query digitalaxNFTStakers($garmentIDs: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxNFTStakers(first: $first, where: { id_gt: $lastID }) {\n      id\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\n        id\n        owner\n        designer\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`\n\n// whitelisted staked nfts on dlta by id list on polygon\nexport const GUILD_WHITELISTED_NFT_STAKERS_BY_GARMENTS = gql`\n  query guildWhitelistedNFTStakers($garmentIDs: [ID!], $first: Int!, $lastID: ID!) {\n    guildWhitelistedNFTStakers(first: $first, where: { id_gt: $lastID }) {\n      id\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\n        id\n        owner\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`\n\n// get staked pode tokens by staker\nexport const GUILD_WHITELISTED_NFT_STAKERS_BY_STAKER = gql`\n  query guildWhitelistedNFTStakers($staker: ID!, $first: Int!, $lastID: ID!) {\n    guildWhitelistedNFTStakers(first: $first, where: { id: $staker, id_gt: $lastID }) {\n      id\n      garments {\n        id\n        owner\n        tokenAddress\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`\n"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,iBAApB;AAEA,OAAO,IAAMC,mBAAmB,GAAGD,GAAH,qQAAzB;AAaP,OAAO,IAAME,mCAAmC,GAAGF,GAAH,+MAAzC;AASP,OAAO,IAAMG,8BAA8B,GAAGH,GAAH,mbAApC;AAkBP,OAAO,IAAMI,qCAAqC,GAAGJ,GAAH,+MAA3C;AASP,OAAO,IAAMK,qBAAqB,GAAGL,GAAH,2MAA3B;AASP,OAAO,IAAMM,qBAAqB,GAAGN,GAAH,yMAA3B,C,CAUP;AAEA;;AACA,OAAO,IAAMO,2BAA2B,GAAGP,GAAH,iWAAjC;AAeP,OAAO,IAAMQ,kBAAkB,GAAGR,GAAH,+VAAxB,C,CAeP;;AACA,OAAO,IAAMS,8BAA8B,GAAGT,GAAH,qWAApC,C,CAeP;;AACA,OAAO,IAAMU,gCAAgC,GAAGV,GAAH,0VAAtC,C,CAcP;;AACA,OAAO,IAAMW,0CAA0C,GAAGX,GAAH,ihBAAhD,C,CAuBP;;AACA,OAAO,IAAMY,gCAAgC,GAAGZ,GAAH,gWAAtC,C,CAkBP;;AACA,OAAO,IAAMa,0CAA0C,GAAGb,GAAH,gSAAhD,C,CASP;;AACA,OAAO,IAAMc,iCAAiC,GAAGd,GAAH,yVAAvC,C,CAcP;;AACA,OAAO,IAAMe,sBAAsB,GAAGf,GAAH,uVAA5B,C,CAcP;;AACA,OAAO,IAAMgB,0CAA0C,GAAGhB,GAAH,gSAAhD,C,CASP;;AACA,OAAO,IAAMiB,6CAA6C,GAAGjB,GAAH,oRAAnD,C,CAUP;;AACA,OAAO,IAAMkB,uBAAuB,GAAGlB,GAAH,qSAA7B,C,CAYP;;AACA,OAAO,IAAMmB,8BAA8B,GAAGnB,GAAH,6RAApC,C,CAWP;;AACA,OAAO,IAAMoB,8BAA8B,GAAGpB,GAAH,qbAApC,C,CAuBP;;AACA,OAAO,IAAMqB,4BAA4B,GAAGrB,GAAH,mVAAlC,C,CAcP;;AACA,OAAO,IAAMsB,4BAA4B,GAAGtB,GAAH,gaAAlC;AAoBP,OAAO,IAAMuB,gCAAgC,GAAGvB,GAAH,mUAAtC;AAWP,OAAO,IAAMwB,+CAA+C,GAAGxB,GAAH,odAArD;AAkBP,OAAO,IAAMyB,sCAAsC,GAAGzB,GAAH,qWAA5C,C,CAcP;;AACA,OAAO,IAAM0B,iCAAiC,GAAG1B,GAAH,gcAAvC,C,CAkBP;;AACA,OAAO,IAAM2B,yCAAyC,GAAG3B,GAAH,4bAA/C,C,CAiBP;;AACA,OAAO,IAAM4B,uCAAuC,GAAG5B,GAAH,6aAA7C"},"metadata":{},"sourceType":"module"}