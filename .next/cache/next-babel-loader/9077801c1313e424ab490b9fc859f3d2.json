{"ast":null,"code":"var _jsxFileName = \"/Volumes/Data/Work/Digitalax/PFPMint/src/containers/modals/modal-sign-up/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport Button from '@components/Button';\nimport Modal from '@components/modal';\nimport Loader from '@components/loader';\nimport { USERNAME_ERROR, USERNAME_ALREADY_EXISTS } from '@constants/global.constants';\nimport { closeSignupModal } from '@actions/modals.actions';\nimport userActions from '@actions/user.actions';\nimport { getAccount, getIsLoading } from '@selectors/user.selectors';\nimport { getModalParams } from '@selectors/modal.selectors';\nimport styles from './styles.module.scss';\nimport { useSignMessage, useUserNameAvailable, useMyIP } from '@hooks/espa/user.hooks';\n\nconst ModalSignUp = ({\n  className,\n  title\n}) => {\n  const dispatch = useDispatch();\n  const params = useSelector(getModalParams);\n  const {\n    0: userName,\n    1: setUserName\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState(params === null || params === void 0 ? void 0 : params.email);\n  const account = useSelector(getAccount);\n  const isLoading = useSelector(getIsLoading);\n  const signMsg = useSignMessage(account);\n  console.log('signMsg: ', signMsg);\n  const isUserNameAvailable = useUserNameAvailable(userName);\n  let myIP = useMyIP();\n\n  const handleClose = () => {\n    dispatch(closeSignupModal());\n  };\n\n  const validateUserName = username => {\n    const regEx = /^[A-Za-z0-9]*$/;\n    return regEx.test(String(username));\n  };\n\n  const validateEmail = email => {\n    const regEx = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return regEx.test(String(email).toLowerCase());\n  };\n\n  const handleClick = () => {\n    if (!signMsg) {\n      if (!validateUserName(userName)) {\n        toast('User ID must contains letters and numbers only!');\n        return;\n      }\n\n      if (!validateEmail(email)) {\n        toast('You have entered an invalid Email address!');\n        return;\n      }\n    }\n\n    dispatch(userActions.tryToSignup(account, userName, email, signMsg, myIP));\n  };\n\n  const userNameChanged = username => {\n    setUserName(username);\n  };\n\n  return __jsx(React.Fragment, null, /*#__PURE__*/createPortal(__jsx(Modal, {\n    onClose: () => handleClose(),\n    title: signMsg === null ? \"CONNECTING WALLET\" : signMsg === '' ? 'CREATE ACCOUNT' : 'SIGN IN HERE!',\n    className: (className, styles.modalWrapper),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: styles.currentAddress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, `CURRENT ETH ADDRESS: ${account ? account : 'WALLET NOT CONNECTED'}`), signMsg === null ? __jsx(Loader, {\n    size: \"large\",\n    className: styles.loader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }) : __jsx(React.Fragment, null, signMsg === '' && (myIP === null ? __jsx(Loader, {\n    size: \"large\",\n    className: styles.loader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 19\n    }\n  }) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: styles.inputItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    className: styles.userIdRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 23\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  }, \"META ID\"), __jsx(\"span\", {\n    className: styles.questionMark,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }, \"?\"), __jsx(\"span\", {\n    className: styles.hint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }, \"No special characters allowed, only numbers and letters.\")), __jsx(\"input\", {\n    value: userName,\n    onChange: e => userNameChanged(e.target.value),\n    className: \"font-poppins text-base\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 23\n    }\n  }), isUserNameAvailable === USERNAME_ALREADY_EXISTS && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 27\n    }\n  }, \"That User ID is already taken. Please choose another one\"), isUserNameAvailable === USERNAME_ERROR && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 27\n    }\n  }, \"Something went wrong on our side. Don't worry, we are working on fixing that right now! Try again soon!\")), __jsx(\"div\", {\n    className: styles.inputItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 23\n    }\n  }, \"EMAIL\"), __jsx(\"input\", {\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    disabled: params === null || params === void 0 ? void 0 : params.email,\n    className: \"font-poppins text-base\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 23\n    }\n  })))), isLoading ? __jsx(Loader, {\n    size: \"large\",\n    className: styles.loader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }) : __jsx(Button, {\n    className: styles.modalButton,\n    background: \"black\",\n    onClick: () => handleClick(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, signMsg ? 'SIGN IN' : 'SIGN UP'))), document.body));\n};\n\nModalSignUp.propTypes = {\n  className: PropTypes.string,\n  title: PropTypes.string\n};\nModalSignUp.defaultProps = {\n  className: '',\n  title: 'CONNECTING WALLET'\n};\nexport default ModalSignUp;","map":{"version":3,"names":["React","useState","createPortal","PropTypes","useDispatch","useSelector","toast","Button","Modal","Loader","USERNAME_ERROR","USERNAME_ALREADY_EXISTS","closeSignupModal","userActions","getAccount","getIsLoading","getModalParams","styles","useSignMessage","useUserNameAvailable","useMyIP","ModalSignUp","className","title","dispatch","params","userName","setUserName","email","setEmail","account","isLoading","signMsg","console","log","isUserNameAvailable","myIP","handleClose","validateUserName","username","regEx","test","String","validateEmail","toLowerCase","handleClick","tryToSignup","userNameChanged","modalWrapper","currentAddress","loader","inputItem","userIdRow","questionMark","hint","e","target","value","modalButton","document","body","propTypes","string","defaultProps"],"sources":["/Volumes/Data/Work/Digitalax/PFPMint/src/containers/modals/modal-sign-up/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport Button from '@components/Button';\nimport Modal from '@components/modal';\nimport Loader from '@components/loader';\n\nimport { USERNAME_ERROR, USERNAME_ALREADY_EXISTS } from '@constants/global.constants'\nimport { closeSignupModal } from '@actions/modals.actions';\nimport userActions from '@actions/user.actions';\n\nimport { getAccount, getIsLoading } from '@selectors/user.selectors';\nimport { getModalParams } from '@selectors/modal.selectors';\n\nimport styles from './styles.module.scss';\nimport { useSignMessage, useUserNameAvailable, useMyIP } from '@hooks/espa/user.hooks';\n\nconst ModalSignUp = ({ className, title }) => {\n  const dispatch = useDispatch();\n  const params = useSelector(getModalParams);\n\n  const [userName, setUserName] = useState('');\n  const [email, setEmail] = useState(params?.email);\n\n  const account = useSelector(getAccount);\n  const isLoading = useSelector(getIsLoading);\n  const signMsg = useSignMessage(account);\n\n  console.log('signMsg: ', signMsg)\n  const isUserNameAvailable = useUserNameAvailable(userName);\n  let myIP = useMyIP();\n\n  const handleClose = () => {\n    dispatch(closeSignupModal());\n  };\n\n  const validateUserName = (username) => {\n    const regEx = /^[A-Za-z0-9]*$/;\n    return regEx.test(String(username));\n  };\n\n  const validateEmail = (email) => {\n    const regEx = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return regEx.test(String(email).toLowerCase());\n  };\n\n  const handleClick = () => {\n    if (!signMsg) {\n      if (!validateUserName(userName)) {\n        toast('User ID must contains letters and numbers only!');\n        return;\n      }\n      if (!validateEmail(email)) {\n        toast('You have entered an invalid Email address!');\n        return;\n      }\n    }\n    dispatch(userActions.tryToSignup(account, userName, email, signMsg, myIP));\n  };\n\n  const userNameChanged = (username) => {\n    setUserName(username);\n  };\n\n  return (\n    <>\n      {createPortal(\n        <Modal\n          onClose={() => handleClose()}\n          title={signMsg === null ? \"CONNECTING WALLET\"  : (signMsg === '' ? 'CREATE ACCOUNT' : 'SIGN IN HERE!') }\n          className={(className, styles.modalWrapper)}\n        >\n          <div className={styles.currentAddress}>\n            {`CURRENT ETH ADDRESS: ${account ? account : 'WALLET NOT CONNECTED'}`}\n          </div>\n          {signMsg === null ? (\n            <Loader size=\"large\" className={styles.loader} />\n          ) : (\n            <>\n              {signMsg === '' &&\n                (myIP === null ? (\n                  <Loader size=\"large\" className={styles.loader} />\n                ) : (\n                  <>\n                    <div className={styles.inputItem}>\n                      <div className={styles.userIdRow}>\n                        <label>META ID</label>\n                        <span className={styles.questionMark}>?</span>\n                        <span className={styles.hint}>\n                          No special characters allowed,\n                          only numbers and letters.\n                        </span>\n                      </div>\n                      <input value={userName} onChange={(e) => userNameChanged(e.target.value)} className=\"font-poppins text-base\" />\n                      {\n                        isUserNameAvailable === USERNAME_ALREADY_EXISTS && (\n                          <p>That User ID is already taken. Please choose another one</p>\n                        )\n                      }\n                      {\n                        isUserNameAvailable === USERNAME_ERROR && (\n                          <p>Something went wrong on our side. Don't worry, we are working on fixing that right now! Try again soon!</p>\n                        )\n                      }\n                    </div>\n                    {/* <div className={styles.inputItem}>\n                      <label>DISCORD USERNAME</label>\n                      <input\n                        value={discordUserName}\n                        onChange={(e) => setDiscordUserName(e.target.value)}\n                      />\n                    </div> */}\n                    <div className={styles.inputItem}>\n                      <label>EMAIL</label>\n                      <input\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        disabled={params?.email}\n                        className=\"font-poppins text-base\"\n                      />\n                    </div>\n                  </>\n                ))}\n              {isLoading ? (\n                <Loader size=\"large\" className={styles.loader} />\n              ) : (\n                <Button\n                  className={styles.modalButton}\n                  background=\"black\"\n                  onClick={() => handleClick()}\n                >\n                  {signMsg ? 'SIGN IN' : 'SIGN UP'}\n                </Button>\n              )}\n            </>\n          )}\n        </Modal>,\n        document.body\n      )}\n    </>\n  );\n};\n\nModalSignUp.propTypes = {\n  className: PropTypes.string,\n  title: PropTypes.string,\n};\n\nModalSignUp.defaultProps = {\n  className: '',\n  title: 'CONNECTING WALLET',\n};\n\nexport default ModalSignUp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}