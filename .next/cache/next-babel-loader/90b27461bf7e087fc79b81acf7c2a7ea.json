{"ast":null,"code":"import Web3 from 'web3';\nimport { isMetamaskInstalled } from '@services/metamask.service';\nimport config from '@utils/config';\nimport { WALLET_METAMASK, WALLET_ARKANE } from '@constants/global.constants';\nimport { STORAGE_WALLET } from '@constants/storage.constants';\nconst options = {\n  clientId: 'DIGITALAX',\n  // rpcUrl: 'https://kovan.infura.io/v3/YOUR-PROJECT-ID', //optional\n  environment: 'production',\n  //optional, production by default\n  signMethod: 'POPUP',\n  //optional, REDIRECT by default\n  // bearerTokenProvider: () => 'obtained_bearer_token', //optional, default undefined\n  //optional: you can set an identity provider to be used when authenticating\n  // authenticationOptions: {\n  //   idpHint: 'google'\n  // },\n  secretType: 'MATIC' //optional, ETHEREUM by default\n\n};\nexport const setWeb3Provider = async () => {\n  const WALLET = localStorage.getItem(STORAGE_WALLET);\n\n  if (WALLET === WALLET_METAMASK) {\n    const provider = isMetamaskInstalled() ? window.ethereum : config.DEFAULT_WEB3_URL;\n    window.web3 = new Web3(provider);\n    return;\n  }\n\n  if (WALLET === WALLET_ARKANE) {\n    console.log('Arkane:', Arkane);\n    const provider = await Arkane.createArkaneProviderEngine(options);\n    window.web3 = new Web3(provider);\n    return;\n  }\n};","map":{"version":3,"names":["Web3","isMetamaskInstalled","config","WALLET_METAMASK","WALLET_ARKANE","STORAGE_WALLET","options","clientId","environment","signMethod","secretType","setWeb3Provider","WALLET","localStorage","getItem","provider","window","ethereum","DEFAULT_WEB3_URL","web3","console","log","Arkane","createArkaneProviderEngine"],"sources":["/Volumes/Data/Work/Digitalax/PFPMint/src/services/web3-provider.service.js"],"sourcesContent":["import Web3 from 'web3';\nimport { isMetamaskInstalled } from '@services/metamask.service';\nimport config from '@utils/config';\nimport { WALLET_METAMASK, WALLET_ARKANE } from '@constants/global.constants';\nimport { STORAGE_WALLET } from '@constants/storage.constants';\n\nconst options = {\n  clientId: 'DIGITALAX',\n  // rpcUrl: 'https://kovan.infura.io/v3/YOUR-PROJECT-ID', //optional\n  environment: 'production', //optional, production by default\n  signMethod: 'POPUP', //optional, REDIRECT by default\n  // bearerTokenProvider: () => 'obtained_bearer_token', //optional, default undefined\n  //optional: you can set an identity provider to be used when authenticating\n  // authenticationOptions: {\n  //   idpHint: 'google'\n  // },\n  secretType: 'MATIC', //optional, ETHEREUM by default\n};\n\nexport const setWeb3Provider = async () => {\n  const WALLET = localStorage.getItem(STORAGE_WALLET);\n  if (WALLET === WALLET_METAMASK) {\n    const provider = isMetamaskInstalled() ? window.ethereum : config.DEFAULT_WEB3_URL;\n    window.web3 = new Web3(provider);\n    return;\n  }\n  if (WALLET === WALLET_ARKANE) {\n    console.log('Arkane:', Arkane)\n    const provider = await Arkane.createArkaneProviderEngine(options);\n    window.web3 = new Web3(provider);\n    return;\n  }\n};\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAASC,mBAAT,QAAoC,4BAApC;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,6BAA/C;AACA,SAASC,cAAT,QAA+B,8BAA/B;AAEA,MAAMC,OAAO,GAAG;EACdC,QAAQ,EAAE,WADI;EAEd;EACAC,WAAW,EAAE,YAHC;EAGa;EAC3BC,UAAU,EAAE,OAJE;EAIO;EACrB;EACA;EACA;EACA;EACA;EACAC,UAAU,EAAE,OAVE,CAUO;;AAVP,CAAhB;AAaA,OAAO,MAAMC,eAAe,GAAG,YAAY;EACzC,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqBT,cAArB,CAAf;;EACA,IAAIO,MAAM,KAAKT,eAAf,EAAgC;IAC9B,MAAMY,QAAQ,GAAGd,mBAAmB,KAAKe,MAAM,CAACC,QAAZ,GAAuBf,MAAM,CAACgB,gBAAlE;IACAF,MAAM,CAACG,IAAP,GAAc,IAAInB,IAAJ,CAASe,QAAT,CAAd;IACA;EACD;;EACD,IAAIH,MAAM,KAAKR,aAAf,EAA8B;IAC5BgB,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,MAAvB;IACA,MAAMP,QAAQ,GAAG,MAAMO,MAAM,CAACC,0BAAP,CAAkCjB,OAAlC,CAAvB;IACAU,MAAM,CAACG,IAAP,GAAc,IAAInB,IAAJ,CAASe,QAAT,CAAd;IACA;EACD;AACF,CAbM"},"metadata":{},"sourceType":"module"}