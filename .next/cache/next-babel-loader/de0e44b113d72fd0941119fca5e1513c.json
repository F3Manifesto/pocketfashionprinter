{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = Image;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _head = _interopRequireDefault(require(\"../next-server/lib/head\"));\n\nconst VALID_LOADING_VALUES = ['lazy', 'eager', undefined];\nconst loaders = new Map([['imgix', imgixLoader], ['cloudinary', cloudinaryLoader], ['akamai', akamaiLoader], ['default', defaultLoader]]);\nconst imageData = process.env.__NEXT_IMAGE_OPTS;\nconst {\n  deviceSizes: configDeviceSizes,\n  imageSizes: configImageSizes,\n  loader: configLoader,\n  path: configPath,\n  domains: configDomains\n} = imageData; // sort smallest to largest\n\nconfigDeviceSizes.sort((a, b) => a - b);\nconfigImageSizes.sort((a, b) => a - b);\nlet cachedObserver;\nconst IntersectionObserver = false ? window.IntersectionObserver : null;\n\nfunction getObserver() {\n  // Return shared instance of IntersectionObserver if already created\n  if (cachedObserver) {\n    return cachedObserver;\n  } // Only create shared IntersectionObserver if supported in browser\n\n\n  if (!IntersectionObserver) {\n    return undefined;\n  }\n\n  return cachedObserver = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        let lazyImage = entry.target;\n\n        if (lazyImage.dataset.src) {\n          lazyImage.src = lazyImage.dataset.src;\n        }\n\n        if (lazyImage.dataset.srcset) {\n          lazyImage.srcset = lazyImage.dataset.srcset;\n        }\n\n        lazyImage.style.visibility = 'visible';\n        lazyImage.classList.remove('__lazy');\n        cachedObserver.unobserve(lazyImage);\n      }\n    });\n  }, {\n    rootMargin: '200px'\n  });\n}\n\nfunction getDeviceSizes(width) {\n  if (typeof width !== 'number') {\n    return configDeviceSizes;\n  }\n\n  if (configImageSizes.includes(width)) {\n    return [width];\n  }\n\n  const widths = [];\n\n  for (let size of configDeviceSizes) {\n    widths.push(size);\n\n    if (size >= width) {\n      break;\n    }\n  }\n\n  return widths;\n}\n\nfunction computeSrc(src, unoptimized, width, quality) {\n  if (unoptimized) {\n    return src;\n  }\n\n  const widths = getDeviceSizes(width);\n  const largest = widths[widths.length - 1];\n  return callLoader({\n    src,\n    width: largest,\n    quality\n  });\n}\n\nfunction callLoader(loaderProps) {\n  const load = loaders.get(configLoader) || defaultLoader;\n  return load((0, _extends2.default)({\n    root: configPath\n  }, loaderProps));\n}\n\nfunction generateSrcSet({\n  src,\n  unoptimized,\n  width,\n  quality\n}) {\n  // At each breakpoint, generate an image url using the loader, such as:\n  // ' www.example.com/foo.jpg?w=480 480w, '\n  if (unoptimized) {\n    return undefined;\n  }\n\n  return getDeviceSizes(width).map(w => `${callLoader({\n    src,\n    width: w,\n    quality\n  })} ${w}w`).join(', ');\n}\n\nfunction generatePreload({\n  src,\n  width,\n  unoptimized = false,\n  sizes,\n  quality\n}) {\n  // This function generates an image preload that makes use of the \"imagesrcset\" and \"imagesizes\"\n  // attributes for preloading responsive images. They're still experimental, but fully backward\n  // compatible, as the link tag includes all necessary attributes, even if the final two are ignored.\n  // See: https://web.dev/preload-responsive-images/\n  return /*#__PURE__*/_react.default.createElement(_head.default, null, /*#__PURE__*/_react.default.createElement(\"link\", {\n    rel: \"preload\",\n    as: \"image\",\n    href: computeSrc(src, unoptimized, width, quality) // @ts-ignore: imagesrcset and imagesizes not yet in the link element type\n    ,\n    imagesrcset: generateSrcSet({\n      src,\n      unoptimized,\n      width,\n      quality\n    }),\n    imagesizes: sizes\n  }));\n}\n\nfunction getInt(x) {\n  if (typeof x === 'number') {\n    return x;\n  }\n\n  if (typeof x === 'string') {\n    return parseInt(x, 10);\n  }\n\n  return undefined;\n}\n\nfunction Image(_ref) {\n  let {\n    src,\n    sizes,\n    unoptimized = false,\n    priority = false,\n    loading,\n    className,\n    quality,\n    width,\n    height,\n    unsized\n  } = _ref,\n      rest = (0, _objectWithoutPropertiesLoose2.default)(_ref, [\"src\", \"sizes\", \"unoptimized\", \"priority\", \"loading\", \"className\", \"quality\", \"width\", \"height\", \"unsized\"]);\n  const thisEl = (0, _react.useRef)(null);\n\n  if (true) {\n    if (!src) {\n      throw new Error(`Image is missing required \"src\" property. Make sure you pass \"src\" in props to the \\`next/image\\` component. Received: ${JSON.stringify({\n        width,\n        height,\n        quality,\n        unsized\n      })}`);\n    }\n\n    if (!VALID_LOADING_VALUES.includes(loading)) {\n      throw new Error(`Image with src \"${src}\" has invalid \"loading\" property. Provided \"${loading}\" should be one of ${VALID_LOADING_VALUES.map(String).join(',')}.`);\n    }\n\n    if (priority && loading === 'lazy') {\n      throw new Error(`Image with src \"${src}\" has both \"priority\" and \"loading=lazy\" properties. Only one should be used.`);\n    }\n  }\n\n  let lazy = loading === 'lazy';\n\n  if (!priority && typeof loading === 'undefined') {\n    lazy = true;\n  }\n\n  (0, _react.useEffect)(() => {\n    const target = thisEl.current;\n\n    if (target && lazy) {\n      const observer = getObserver();\n\n      if (observer) {\n        observer.observe(target);\n        return () => {\n          observer.unobserve(target);\n        };\n      }\n    }\n  }, [thisEl, lazy]);\n  const widthInt = getInt(width);\n  const heightInt = getInt(height);\n  const qualityInt = getInt(quality);\n  let divStyle;\n  let imgStyle;\n  let wrapperStyle;\n\n  if (typeof widthInt !== 'undefined' && typeof heightInt !== 'undefined' && !unsized) {\n    // <Image src=\"i.png\" width={100} height={100} />\n    // <Image src=\"i.png\" width=\"100\" height=\"100\" />\n    const quotient = heightInt / widthInt;\n    const ratio = isNaN(quotient) ? 1 : quotient * 100;\n    wrapperStyle = {\n      maxWidth: '100%',\n      width: widthInt\n    };\n    divStyle = {\n      position: 'relative',\n      paddingBottom: `${ratio}%`\n    };\n    imgStyle = {\n      visibility: lazy ? 'hidden' : 'visible',\n      height: '100%',\n      left: '0',\n      position: 'absolute',\n      top: '0',\n      width: '100%'\n    };\n  } else if (typeof widthInt === 'undefined' && typeof heightInt === 'undefined' && unsized) {\n    // <Image src=\"i.png\" unsized />\n    if (true) {\n      if (priority) {\n        // <Image src=\"i.png\" unsized priority />\n        console.warn(`Image with src \"${src}\" has both \"priority\" and \"unsized\" properties. Only one should be used.`);\n      }\n    }\n  } else {\n    // <Image src=\"i.png\" />\n    if (true) {\n      throw new Error(`Image with src \"${src}\" must use \"width\" and \"height\" properties or \"unsized\" property.`);\n    }\n  } // Generate attribute values\n\n\n  const imgSrc = computeSrc(src, unoptimized, widthInt, qualityInt);\n  const imgSrcSet = generateSrcSet({\n    src,\n    width: widthInt,\n    unoptimized,\n    quality: qualityInt\n  });\n  let imgAttributes;\n\n  if (!lazy) {\n    imgAttributes = {\n      src: imgSrc\n    };\n\n    if (imgSrcSet) {\n      imgAttributes.srcSet = imgSrcSet;\n    }\n  } else {\n    imgAttributes = {\n      'data-src': imgSrc\n    };\n\n    if (imgSrcSet) {\n      imgAttributes['data-srcset'] = imgSrcSet;\n    }\n\n    className = className ? className + ' __lazy' : '__lazy';\n  } // No need to add preloads on the client side--by the time the application is hydrated,\n  // it's too late for preloads\n\n\n  const shouldPreload = priority && true;\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    style: wrapperStyle\n  }, /*#__PURE__*/_react.default.createElement(\"div\", {\n    style: divStyle\n  }, shouldPreload ? generatePreload({\n    src,\n    width: widthInt,\n    unoptimized,\n    sizes,\n    quality: qualityInt\n  }) : '', /*#__PURE__*/_react.default.createElement(\"img\", Object.assign({}, rest, imgAttributes, {\n    className: className,\n    sizes: sizes,\n    ref: thisEl,\n    style: imgStyle\n  }))));\n} //BUILT IN LOADERS\n\n\nfunction normalizeSrc(src) {\n  return src[0] === '/' ? src.slice(1) : src;\n}\n\nfunction imgixLoader({\n  root,\n  src,\n  width,\n  quality\n}) {\n  const params = ['auto=format', 'w=' + width];\n  let paramsString = '';\n\n  if (quality) {\n    params.push('q=' + quality);\n  }\n\n  if (params.length) {\n    paramsString = '?' + params.join('&');\n  }\n\n  return `${root}${normalizeSrc(src)}${paramsString}`;\n}\n\nfunction akamaiLoader({\n  root,\n  src,\n  width\n}) {\n  return `${root}${normalizeSrc(src)}?imwidth=${width}`;\n}\n\nfunction cloudinaryLoader({\n  root,\n  src,\n  width,\n  quality\n}) {\n  const params = ['f_auto', 'w_' + width];\n  let paramsString = '';\n\n  if (quality) {\n    params.push('q_' + quality);\n  }\n\n  if (params.length) {\n    paramsString = params.join(',') + '/';\n  }\n\n  return `${root}${paramsString}${normalizeSrc(src)}`;\n}\n\nfunction defaultLoader({\n  root,\n  src,\n  width,\n  quality\n}) {\n  if (true) {\n    const missingValues = []; // these should always be provided but make sure they are\n\n    if (!src) missingValues.push('src');\n    if (!width) missingValues.push('width');\n\n    if (missingValues.length > 0) {\n      throw new Error(`Next Image Optimization requires ${missingValues.join(', ')} to be provided. Make sure you pass them as props to the \\`next/image\\` component. Received: ${JSON.stringify({\n        src,\n        width,\n        quality\n      })}`);\n    }\n\n    if (src && !src.startsWith('/') && configDomains) {\n      let parsedSrc;\n\n      try {\n        parsedSrc = new URL(src);\n      } catch (err) {\n        console.error(err);\n        throw new Error(`Failed to parse \"${src}\" if using relative image it must start with a leading slash \"/\" or be an absolute URL`);\n      }\n\n      if (!configDomains.includes(parsedSrc.hostname)) {\n        throw new Error(`Invalid src prop (${src}) on \\`next/image\\`, hostname is not configured under images in your \\`next.config.js\\``);\n      }\n    }\n  }\n\n  return `${root}?url=${encodeURIComponent(src)}&w=${width}&q=${quality || 75}`;\n}","map":{"version":3,"sources":["../../client/image.tsx"],"names":["VALID_LOADING_VALUES","loaders","imageData","process","deviceSizes","imageSizes","loader","path","domains","configDeviceSizes","a","configImageSizes","IntersectionObserver","window","cachedObserver","entries","entry","lazyImage","rootMargin","widths","size","getDeviceSizes","largest","callLoader","width","load","root","w","unoptimized","computeSrc","generateSrcSet","parseInt","priority","rest","thisEl","JSON","src","loading","lazy","target","observer","getObserver","widthInt","getInt","heightInt","qualityInt","quotient","ratio","isNaN","wrapperStyle","maxWidth","divStyle","position","paddingBottom","imgStyle","visibility","height","left","top","console","imgSrc","imgSrcSet","quality","imgAttributes","className","shouldPreload","generatePreload","params","paramsString","normalizeSrc","missingValues","parsedSrc","configDomains","encodeURIComponent"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect, useRef } from 'react'\nimport Head from '../next-server/lib/head'\n\nconst VALID_LOADING_VALUES = ['lazy', 'eager', undefined] as const\ntype LoadingValue = typeof VALID_LOADING_VALUES[number]\n\nconst loaders = new Map<LoaderKey, (props: LoaderProps) => string>([\n  ['imgix', imgixLoader],\n  ['cloudinary', cloudinaryLoader],\n  ['akamai', akamaiLoader],\n  ['default', defaultLoader],\n])\n\ntype LoaderKey = 'imgix' | 'cloudinary' | 'akamai' | 'default'\n\ntype ImageData = {\n  deviceSizes: number[]\n  imageSizes: number[]\n  loader: LoaderKey\n  path: string\n  domains?: string[]\n}\n\ntype ImageProps = Omit<\n  JSX.IntrinsicElements['img'],\n  'src' | 'srcSet' | 'ref' | 'width' | 'height' | 'loading'\n> & {\n  src: string\n  quality?: number | string\n  priority?: boolean\n  loading?: LoadingValue\n  unoptimized?: boolean\n} & (\n    | { width: number | string; height: number | string; unsized?: false }\n    | { width?: number | string; height?: number | string; unsized: true }\n  )\n\nconst imageData: ImageData = process.env.__NEXT_IMAGE_OPTS as any\nconst {\n  deviceSizes: configDeviceSizes,\n  imageSizes: configImageSizes,\n  loader: configLoader,\n  path: configPath,\n  domains: configDomains,\n} = imageData\n// sort smallest to largest\nconfigDeviceSizes.sort((a, b) => a - b)\nconfigImageSizes.sort((a, b) => a - b)\n\nlet cachedObserver: IntersectionObserver\nconst IntersectionObserver =\n  typeof window !== 'undefined' ? window.IntersectionObserver : null\n\nfunction getObserver(): IntersectionObserver | undefined {\n  // Return shared instance of IntersectionObserver if already created\n  if (cachedObserver) {\n    return cachedObserver\n  }\n\n  // Only create shared IntersectionObserver if supported in browser\n  if (!IntersectionObserver) {\n    return undefined\n  }\n\n  return (cachedObserver = new IntersectionObserver(\n    (entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          let lazyImage = entry.target as HTMLImageElement\n          if (lazyImage.dataset.src) {\n            lazyImage.src = lazyImage.dataset.src\n          }\n          if (lazyImage.dataset.srcset) {\n            lazyImage.srcset = lazyImage.dataset.srcset\n          }\n          lazyImage.style.visibility = 'visible'\n          lazyImage.classList.remove('__lazy')\n          cachedObserver.unobserve(lazyImage)\n        }\n      })\n    },\n    { rootMargin: '200px' }\n  ))\n}\n\nfunction getDeviceSizes(width: number | undefined): number[] {\n  if (typeof width !== 'number') {\n    return configDeviceSizes\n  }\n  if (configImageSizes.includes(width)) {\n    return [width]\n  }\n  const widths: number[] = []\n  for (let size of configDeviceSizes) {\n    widths.push(size)\n    if (size >= width) {\n      break\n    }\n  }\n  return widths\n}\n\nfunction computeSrc(\n  src: string,\n  unoptimized: boolean,\n  width?: number,\n  quality?: number\n): string {\n  if (unoptimized) {\n    return src\n  }\n  const widths = getDeviceSizes(width)\n  const largest = widths[widths.length - 1]\n  return callLoader({ src, width: largest, quality })\n}\n\ntype CallLoaderProps = {\n  src: string\n  width: number\n  quality?: number\n}\n\nfunction callLoader(loaderProps: CallLoaderProps) {\n  const load = loaders.get(configLoader) || defaultLoader\n  return load({ root: configPath, ...loaderProps })\n}\n\ntype SrcSetData = {\n  src: string\n  unoptimized: boolean\n  width?: number\n  quality?: number\n}\n\nfunction generateSrcSet({\n  src,\n  unoptimized,\n  width,\n  quality,\n}: SrcSetData): string | undefined {\n  // At each breakpoint, generate an image url using the loader, such as:\n  // ' www.example.com/foo.jpg?w=480 480w, '\n  if (unoptimized) {\n    return undefined\n  }\n\n  return getDeviceSizes(width)\n    .map((w) => `${callLoader({ src, width: w, quality })} ${w}w`)\n    .join(', ')\n}\n\ntype PreloadData = {\n  src: string\n  unoptimized: boolean\n  width: number | undefined\n  sizes?: string\n  quality?: number\n}\n\nfunction generatePreload({\n  src,\n  width,\n  unoptimized = false,\n  sizes,\n  quality,\n}: PreloadData): ReactElement {\n  // This function generates an image preload that makes use of the \"imagesrcset\" and \"imagesizes\"\n  // attributes for preloading responsive images. They're still experimental, but fully backward\n  // compatible, as the link tag includes all necessary attributes, even if the final two are ignored.\n  // See: https://web.dev/preload-responsive-images/\n  return (\n    <Head>\n      <link\n        rel=\"preload\"\n        as=\"image\"\n        href={computeSrc(src, unoptimized, width, quality)}\n        // @ts-ignore: imagesrcset and imagesizes not yet in the link element type\n        imagesrcset={generateSrcSet({ src, unoptimized, width, quality })}\n        imagesizes={sizes}\n      />\n    </Head>\n  )\n}\n\nfunction getInt(x: unknown): number | undefined {\n  if (typeof x === 'number') {\n    return x\n  }\n  if (typeof x === 'string') {\n    return parseInt(x, 10)\n  }\n  return undefined\n}\n\nexport default function Image({\n  src,\n  sizes,\n  unoptimized = false,\n  priority = false,\n  loading,\n  className,\n  quality,\n  width,\n  height,\n  unsized,\n  ...rest\n}: ImageProps) {\n  const thisEl = useRef<HTMLImageElement>(null)\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!src) {\n      throw new Error(\n        `Image is missing required \"src\" property. Make sure you pass \"src\" in props to the \\`next/image\\` component. Received: ${JSON.stringify(\n          { width, height, quality, unsized }\n        )}`\n      )\n    }\n    if (!VALID_LOADING_VALUES.includes(loading)) {\n      throw new Error(\n        `Image with src \"${src}\" has invalid \"loading\" property. Provided \"${loading}\" should be one of ${VALID_LOADING_VALUES.map(\n          String\n        ).join(',')}.`\n      )\n    }\n    if (priority && loading === 'lazy') {\n      throw new Error(\n        `Image with src \"${src}\" has both \"priority\" and \"loading=lazy\" properties. Only one should be used.`\n      )\n    }\n  }\n\n  let lazy = loading === 'lazy'\n  if (!priority && typeof loading === 'undefined') {\n    lazy = true\n  }\n\n  useEffect(() => {\n    const target = thisEl.current\n\n    if (target && lazy) {\n      const observer = getObserver()\n\n      if (observer) {\n        observer.observe(target)\n\n        return () => {\n          observer.unobserve(target)\n        }\n      }\n    }\n  }, [thisEl, lazy])\n\n  const widthInt = getInt(width)\n  const heightInt = getInt(height)\n  const qualityInt = getInt(quality)\n\n  let divStyle: React.CSSProperties | undefined\n  let imgStyle: React.CSSProperties | undefined\n  let wrapperStyle: React.CSSProperties | undefined\n  if (\n    typeof widthInt !== 'undefined' &&\n    typeof heightInt !== 'undefined' &&\n    !unsized\n  ) {\n    // <Image src=\"i.png\" width={100} height={100} />\n    // <Image src=\"i.png\" width=\"100\" height=\"100\" />\n    const quotient = heightInt / widthInt\n    const ratio = isNaN(quotient) ? 1 : quotient * 100\n    wrapperStyle = {\n      maxWidth: '100%',\n      width: widthInt,\n    }\n    divStyle = {\n      position: 'relative',\n      paddingBottom: `${ratio}%`,\n    }\n    imgStyle = {\n      visibility: lazy ? 'hidden' : 'visible',\n      height: '100%',\n      left: '0',\n      position: 'absolute',\n      top: '0',\n      width: '100%',\n    }\n  } else if (\n    typeof widthInt === 'undefined' &&\n    typeof heightInt === 'undefined' &&\n    unsized\n  ) {\n    // <Image src=\"i.png\" unsized />\n    if (process.env.NODE_ENV !== 'production') {\n      if (priority) {\n        // <Image src=\"i.png\" unsized priority />\n        console.warn(\n          `Image with src \"${src}\" has both \"priority\" and \"unsized\" properties. Only one should be used.`\n        )\n      }\n    }\n  } else {\n    // <Image src=\"i.png\" />\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Image with src \"${src}\" must use \"width\" and \"height\" properties or \"unsized\" property.`\n      )\n    }\n  }\n\n  // Generate attribute values\n  const imgSrc = computeSrc(src, unoptimized, widthInt, qualityInt)\n  const imgSrcSet = generateSrcSet({\n    src,\n    width: widthInt,\n    unoptimized,\n    quality: qualityInt,\n  })\n\n  let imgAttributes:\n    | {\n        src: string\n        srcSet?: string\n      }\n    | {\n        'data-src': string\n        'data-srcset'?: string\n      }\n  if (!lazy) {\n    imgAttributes = {\n      src: imgSrc,\n    }\n    if (imgSrcSet) {\n      imgAttributes.srcSet = imgSrcSet\n    }\n  } else {\n    imgAttributes = {\n      'data-src': imgSrc,\n    }\n    if (imgSrcSet) {\n      imgAttributes['data-srcset'] = imgSrcSet\n    }\n    className = className ? className + ' __lazy' : '__lazy'\n  }\n\n  // No need to add preloads on the client side--by the time the application is hydrated,\n  // it's too late for preloads\n  const shouldPreload = priority && typeof window === 'undefined'\n\n  return (\n    <div style={wrapperStyle}>\n      <div style={divStyle}>\n        {shouldPreload\n          ? generatePreload({\n              src,\n              width: widthInt,\n              unoptimized,\n              sizes,\n              quality: qualityInt,\n            })\n          : ''}\n        <img\n          {...rest}\n          {...imgAttributes}\n          className={className}\n          sizes={sizes}\n          ref={thisEl}\n          style={imgStyle}\n        />\n      </div>\n    </div>\n  )\n}\n\n//BUILT IN LOADERS\n\ntype LoaderProps = CallLoaderProps & { root: string }\n\nfunction normalizeSrc(src: string) {\n  return src[0] === '/' ? src.slice(1) : src\n}\n\nfunction imgixLoader({ root, src, width, quality }: LoaderProps): string {\n  const params = ['auto=format', 'w=' + width]\n  let paramsString = ''\n  if (quality) {\n    params.push('q=' + quality)\n  }\n\n  if (params.length) {\n    paramsString = '?' + params.join('&')\n  }\n  return `${root}${normalizeSrc(src)}${paramsString}`\n}\n\nfunction akamaiLoader({ root, src, width }: LoaderProps): string {\n  return `${root}${normalizeSrc(src)}?imwidth=${width}`\n}\n\nfunction cloudinaryLoader({ root, src, width, quality }: LoaderProps): string {\n  const params = ['f_auto', 'w_' + width]\n  let paramsString = ''\n  if (quality) {\n    params.push('q_' + quality)\n  }\n  if (params.length) {\n    paramsString = params.join(',') + '/'\n  }\n  return `${root}${paramsString}${normalizeSrc(src)}`\n}\n\nfunction defaultLoader({ root, src, width, quality }: LoaderProps): string {\n  if (process.env.NODE_ENV !== 'production') {\n    const missingValues = []\n\n    // these should always be provided but make sure they are\n    if (!src) missingValues.push('src')\n    if (!width) missingValues.push('width')\n\n    if (missingValues.length > 0) {\n      throw new Error(\n        `Next Image Optimization requires ${missingValues.join(\n          ', '\n        )} to be provided. Make sure you pass them as props to the \\`next/image\\` component. Received: ${JSON.stringify(\n          { src, width, quality }\n        )}`\n      )\n    }\n\n    if (src && !src.startsWith('/') && configDomains) {\n      let parsedSrc: URL\n      try {\n        parsedSrc = new URL(src)\n      } catch (err) {\n        console.error(err)\n        throw new Error(\n          `Failed to parse \"${src}\" if using relative image it must start with a leading slash \"/\" or be an absolute URL`\n        )\n      }\n\n      if (!configDomains.includes(parsedSrc.hostname)) {\n        throw new Error(\n          `Invalid src prop (${src}) on \\`next/image\\`, hostname is not configured under images in your \\`next.config.js\\``\n        )\n      }\n    }\n  }\n\n  return `${root}?url=${encodeURIComponent(src)}&w=${width}&q=${quality || 75}`\n}\n"]},"metadata":{},"sourceType":"script"}