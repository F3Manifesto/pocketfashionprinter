{"ast":null,"code":"import Web3 from 'web3';\nimport BaseActions from '@actions/base-actions';\nimport userActions from '@actions/user.actions';\nimport globalReducer from '@reducers/global.reducer';\nimport { isMetamaskInstalled } from '@services/metamask.service';\nimport { getDefaultNetworkChainId, getEnabledNetworkByChainId, getAPIUrlByChainId, getWSUrlByChainId } from '@services/network.service';\nimport api from '@services/api/api.service';\nimport ws from '@services/api/ws.service';\nimport { STORAGE_IS_LOGGED_IN, STORAGE_WALLET } from '@constants/storage.constants';\nimport { WALLET_METAMASK, WALLET_ARKANE } from '@constants/global.constants';\n\nclass GlobalActions extends BaseActions {\n  initApp() {\n    return async dispatch => {\n      /**\n       * Check installed Metamask or \n      Check if Arkane loggedIn\n       */\n      if (localStorage.getItem(STORAGE_IS_LOGGED_IN) && localStorage.getItem(STORAGE_WALLET) === WALLET_ARKANE || !isMetamaskInstalled()) {\n        dispatch(this.changeNetwork(getDefaultNetworkChainId()));\n        dispatch(this.setValue('isInitialized', true));\n        console.log('METAMASK WAS NOT DETECTED ON init');\n        return;\n      }\n\n      const {\n        ethereum\n      } = window;\n      console.log('-----here: ', window.web3);\n      window.web3 = new Web3(ethereum);\n      /**\n       * Init subscribers\n       */\n\n      ethereum.on('accountsChanged', accounts => {\n        const [account] = accounts;\n\n        if (localStorage.getItem(STORAGE_IS_LOGGED_IN)) {\n          dispatch(userActions.setValue('account', account || null));\n          localStorage.setItem(STORAGE_IS_LOGGED_IN, 1);\n        }\n      });\n\n      if (ethereum.selectedAddress && localStorage.getItem(STORAGE_IS_LOGGED_IN)) {\n        dispatch(userActions.setValue('account', ethereum.selectedAddress));\n      }\n\n      ethereum.on('chainChanged', async chainId => {\n        console.log('chain changed... global new');\n\n        if (!chainId) {\n          return;\n        }\n\n        dispatch(this.changeNetwork(chainId));\n\n        if (getEnabledNetworkByChainId(chainId)) {} else {\n          console.error('Wrong network. Contracts are not deployed yet');\n        }\n      });\n      dispatch(this.changeNetwork(ethereum.chainId));\n      dispatch(this.setValue('isInitialized', true));\n    };\n  }\n\n  changeNetwork(chainId) {\n    return async dispatch => {\n      const url = getAPIUrlByChainId(chainId);\n      const wsUrl = getWSUrlByChainId(chainId);\n      api.setUrl(url);\n      ws.setUrl(wsUrl);\n      dispatch(this.setValue('chainId', chainId));\n    };\n  }\n\n}\n\nexport default new GlobalActions(globalReducer);","map":{"version":3,"names":["Web3","BaseActions","userActions","globalReducer","isMetamaskInstalled","getDefaultNetworkChainId","getEnabledNetworkByChainId","getAPIUrlByChainId","getWSUrlByChainId","api","ws","STORAGE_IS_LOGGED_IN","STORAGE_WALLET","WALLET_METAMASK","WALLET_ARKANE","GlobalActions","initApp","dispatch","localStorage","getItem","changeNetwork","setValue","console","log","ethereum","window","web3","on","accounts","account","setItem","selectedAddress","chainId","error","url","wsUrl","setUrl"],"sources":["/Volumes/Data/Work/Digitalax/PFPMint/src/actions/global.new.actions.js"],"sourcesContent":["import Web3 from 'web3'\nimport BaseActions from '@actions/base-actions'\nimport userActions from '@actions/user.actions'\nimport globalReducer from '@reducers/global.reducer'\nimport { isMetamaskInstalled } from '@services/metamask.service'\nimport {\n  getDefaultNetworkChainId,\n  getEnabledNetworkByChainId,\n  getAPIUrlByChainId,\n  getWSUrlByChainId,\n} from '@services/network.service'\n\nimport api from '@services/api/api.service'\nimport ws from '@services/api/ws.service'\n\nimport { STORAGE_IS_LOGGED_IN, STORAGE_WALLET } from '@constants/storage.constants'\nimport { WALLET_METAMASK, WALLET_ARKANE } from '@constants/global.constants'\n\nclass GlobalActions extends BaseActions {\n  initApp() {\n    return async (dispatch) => {\n      /**\n       * Check installed Metamask or \n      Check if Arkane loggedIn\n       */\n      if (\n        (localStorage.getItem(STORAGE_IS_LOGGED_IN) &&\n          localStorage.getItem(STORAGE_WALLET) === WALLET_ARKANE) ||\n        !isMetamaskInstalled()\n      ) {\n        dispatch(this.changeNetwork(getDefaultNetworkChainId()))\n        dispatch(this.setValue('isInitialized', true))\n        console.log('METAMASK WAS NOT DETECTED ON init')\n        return\n      }\n      const { ethereum } = window\n      console.log('-----here: ', window.web3)\n      window.web3 = new Web3(ethereum)\n      /**\n       * Init subscribers\n       */\n      ethereum.on('accountsChanged', (accounts) => {\n        const [account] = accounts\n        if (localStorage.getItem(STORAGE_IS_LOGGED_IN)) {\n          dispatch(userActions.setValue('account', account || null))\n          localStorage.setItem(STORAGE_IS_LOGGED_IN, 1)\n        }\n      })\n\n      if (ethereum.selectedAddress && localStorage.getItem(STORAGE_IS_LOGGED_IN)) {\n        dispatch(userActions.setValue('account', ethereum.selectedAddress))\n      }\n\n      ethereum.on('chainChanged', async (chainId) => {\n\n        console.log('chain changed... global new')\n        \n        if (!chainId) {\n          return\n        }\n\n        dispatch(this.changeNetwork(chainId))\n\n        if (getEnabledNetworkByChainId(chainId)) {\n        } else {\n          console.error('Wrong network. Contracts are not deployed yet')\n        }\n      })\n\n      dispatch(this.changeNetwork(ethereum.chainId))\n      dispatch(this.setValue('isInitialized', true))\n    }\n  }\n\n  \n  changeNetwork(chainId) {\n    return async (dispatch) => {\n      const url = getAPIUrlByChainId(chainId)\n      const wsUrl = getWSUrlByChainId(chainId)\n\n      api.setUrl(url)\n      ws.setUrl(wsUrl)\n      dispatch(this.setValue('chainId', chainId))\n    }\n  }\n}\n\nexport default new GlobalActions(globalReducer)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}