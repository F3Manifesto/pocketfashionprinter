{"ast":null,"code":"import { STAGE_ESPA_BACKEND_URL, USERNAME_ERROR } from '@constants/global.constants';\nimport { get, post, put } from '@utils/api';\nimport axios from 'axios';\n\nclass EspaApiService {\n  constructor() {\n    this.url = STAGE_ESPA_BACKEND_URL;\n  }\n\n  setUrl(url) {\n    this.url = url;\n  }\n\n  async handleSignUp(account, userName, email, ip) {\n    try {\n      const message = await post('/register', {\n        wallet: account,\n        username: userName,\n        email,\n        ipAddrs: ip\n      });\n      return message;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async fetchAuthToken(account) {\n    try {\n      const data = await post('/account-exists', {\n        wallet: account\n      });\n\n      if (data === 0) {\n        return '';\n      }\n\n      return data;\n    } catch (e) {\n      return '';\n    }\n  }\n\n  async handleAuthentication(account, signMsg, signature) {\n    try {\n      const data = await post('/authenticate', {\n        wallet: account,\n        randomString: signMsg,\n        signature\n      });\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async checkUserName(username) {\n    try {\n      const isExist = await get('/username-available', {\n        username\n      });\n      return isExist | 0;\n    } catch (e) {\n      return USERNAME_ERROR;\n    }\n  }\n\n  async fetchNfts(account) {\n    try {\n      const ntfs = await get('/get-nfts', {\n        wallet: account\n      });\n      return ntfs;\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async getProfile() {\n    try {\n      const user = await get('/profile');\n      return user;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async updateProfile(user) {\n    try {\n      const data = await put('/profile', user);\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getPresignedUrl() {\n    try {\n      const data = await get('/presigned-url');\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getPresignedGeneralUrl(contentType, fileName) {\n    try {\n      const data = await get('/presigned-general-url', {\n        contentType,\n        fileName\n      });\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getPresignedVideoUrl() {\n    try {\n      const data = await get('/presigned-video-url');\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async uploadImageToS3(url, file) {\n    try {\n      await axios.put(url, file, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  async getMyIP() {\n    try {\n      const url = 'https://api.ipify.org/?format=json';\n      const {\n        data\n      } = await axios.get(url);\n      return data.ip;\n    } catch (e) {\n      return '';\n    }\n  }\n\n  async checkProfanity(username) {\n    try {\n      const url = `https://www.purgomalum.com/service/containsprofanity?text=${username}`;\n      const {\n        data\n      } = await axios.get(url);\n      return data;\n    } catch (e) {\n      return true;\n    }\n  }\n\n  async getThumbnailsByModel(modelId) {\n    try {\n      const thumbnails = await get('/get-thumbnails-by-model', {\n        modelId\n      });\n      return thumbnails;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getAllThumbnails() {\n    try {\n      const thumbnails = await get('/get-all-thumbnails');\n      return thumbnails;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getViews(viewsType, viewsId) {\n    try {\n      const views = await get('/get-views-by-id', {\n        viewsType,\n        viewsId\n      });\n      return views;\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async getAllUsersName() {\n    try {\n      const allUsers = await get('/get-all-users-name');\n      return allUsers;\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async addLove(account, signMsg, viewsType, viewsId) {\n    try {\n      const data = await post('/add-love', {\n        wallet: account,\n        randomString: signMsg,\n        viewsType,\n        viewsId\n      });\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async addView(viewsType, viewsId) {\n    try {\n      const data = await post('/add-view', {\n        viewsType,\n        viewsId\n      });\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getAllDesigners() {\n    try {\n      const designers = await get('/get-all-designers');\n      return designers ? designers.data : [];\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getAllModels() {\n    try {\n      const models = await get('/get-all-models');\n      return models ? models.data : [];\n    } catch (e) {\n      return null;\n    }\n  }\n\n}\n\nexport default new EspaApiService();","map":{"version":3,"names":["STAGE_ESPA_BACKEND_URL","USERNAME_ERROR","get","post","put","axios","EspaApiService","constructor","url","setUrl","handleSignUp","account","userName","email","ip","message","wallet","username","ipAddrs","e","fetchAuthToken","data","handleAuthentication","signMsg","signature","randomString","checkUserName","isExist","fetchNfts","ntfs","getProfile","user","updateProfile","getPresignedUrl","getPresignedGeneralUrl","contentType","fileName","getPresignedVideoUrl","uploadImageToS3","file","headers","getMyIP","checkProfanity","getThumbnailsByModel","modelId","thumbnails","getAllThumbnails","getViews","viewsType","viewsId","views","getAllUsersName","allUsers","addLove","addView","getAllDesigners","designers","getAllModels","models"],"sources":["/Volumes/Data/Work/Digitalax/PFPMint/src/services/api/espa/api.service.js"],"sourcesContent":["import { STAGE_ESPA_BACKEND_URL, USERNAME_ERROR } from '@constants/global.constants'\nimport { get, post, put } from '@utils/api'\nimport axios from 'axios'\n\nclass EspaApiService {\n  constructor() {\n    this.url = STAGE_ESPA_BACKEND_URL\n  }\n\n  setUrl(url) {\n    this.url = url\n  }\n\n  async handleSignUp(account, userName, email, ip) {\n    try {\n      const message = await post('/register', {\n        wallet: account,\n        username: userName,\n        email,\n        ipAddrs: ip,\n      })\n      return message\n    } catch (e) {\n      return null\n    }\n  }\n\n  async fetchAuthToken(account) {\n    try {\n      const data = await post('/account-exists', {\n        wallet: account,\n      })\n      if (data === 0) {\n        return ''\n      }\n      return data\n    } catch (e) {\n      return ''\n    }\n  }\n\n  async handleAuthentication(account, signMsg, signature) {\n    try {\n      const data = await post('/authenticate', {\n        wallet: account,\n        randomString: signMsg,\n        signature,\n      })\n      return data\n    } catch (e) {\n      return null\n    }\n  }\n\n  async checkUserName(username) {\n    try {\n      const isExist = await get('/username-available', {\n        username,\n      })\n      return isExist | 0\n    } catch (e) {\n      return USERNAME_ERROR\n    }\n  }\n\n  async fetchNfts(account) {\n    try {\n      const ntfs = await get('/get-nfts', {\n        wallet: account,\n      })\n      return ntfs\n    } catch (e) {\n      return []\n    }\n  }\n\n  async getProfile() {\n    try {\n      const user = await get('/profile')\n      return user\n    } catch (e) {\n      return null\n    }\n  }\n\n  async updateProfile(user) {\n    try {\n      const data = await put('/profile', user)\n      return data\n    } catch (e) {\n      return null\n    }\n  }\n\n  async getPresignedUrl() {\n    try {\n      const data = await get('/presigned-url')\n      return data\n    } catch (e) {\n      return null\n    }\n  }\n\n  async getPresignedGeneralUrl(contentType, fileName) {\n    try {\n      const data = await get('/presigned-general-url', {\n        contentType,\n        fileName,\n      })\n      return data\n    } catch (e) {\n      return null\n    }\n  }\n\n  async getPresignedVideoUrl() {\n    try {\n      const data = await get('/presigned-video-url')\n      return data\n    } catch (e) {\n      return null\n    }\n  }\n\n  async uploadImageToS3(url, file) {\n    try {\n      await axios.put(url, file, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      })\n      return true\n    } catch (e) {\n      return false\n    }\n  }\n\n  async getMyIP() {\n    try {\n      const url = 'https://api.ipify.org/?format=json'\n      const { data } = await axios.get(url)\n      return data.ip\n    } catch (e) {\n      return ''\n    }\n  }\n\n  async checkProfanity(username) {\n    try {\n      const url = `https://www.purgomalum.com/service/containsprofanity?text=${username}`\n      const { data } = await axios.get(url)\n      return data\n    } catch (e) {\n      return true\n    }\n  }\n\n  async getThumbnailsByModel(modelId) {\n    try {\n      const thumbnails = await get('/get-thumbnails-by-model', { modelId })\n      return thumbnails\n    } catch (e) {\n      return null\n    }\n  }\n\n  async getAllThumbnails() {\n    try {\n      const thumbnails = await get('/get-all-thumbnails')\n      return thumbnails\n    } catch (e) {\n      return null\n    }\n  }\n\n  async getViews(viewsType, viewsId) {\n    try {\n      const views = await get('/get-views-by-id', {\n        viewsType,\n        viewsId,\n      })\n      return views\n    } catch (e) {\n      return []\n    }\n  }\n\n  async getAllUsersName() {\n    try {\n      const allUsers = await get('/get-all-users-name')\n      return allUsers\n    } catch (e) {\n      return []\n    }\n  }\n\n  async addLove(account, signMsg, viewsType, viewsId) {\n    try {\n      const data = await post('/add-love', {\n        wallet: account,\n        randomString: signMsg,\n        viewsType,\n        viewsId,\n      })\n      return data\n    } catch (e) {\n      return null\n    }\n  }\n\n  async addView(viewsType, viewsId) {\n    try {\n      const data = await post('/add-view', {\n        viewsType,\n        viewsId,\n      })\n      return data\n    } catch (e) {\n      return null\n    }\n  }\n\n  async getAllDesigners() {\n    try {\n      const designers = await get('/get-all-designers');\n      return designers ? designers.data : [];\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getAllModels() {\n    try {\n      const models = await get('/get-all-models')\n      return models ? models.data : []\n    } catch (e) {\n      return null\n    }\n  }\n}\n\nexport default new EspaApiService()\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}