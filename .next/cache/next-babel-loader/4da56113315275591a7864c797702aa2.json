{"ast":null,"code":"import { AVAILABLE_NETWORKS } from '@constants/networks.constants';\nimport config from '@utils/config';\nexport var getEnabledNetworks = function getEnabledNetworks() {\n  return AVAILABLE_NETWORKS.filter(function (network) {\n    return config.NETWORKS.includes(network.alias);\n  });\n};\nexport var getEnabledNetworkByChainId = function getEnabledNetworkByChainId(chainId) {\n  return getEnabledNetworks().find(function (network) {\n    return Number(network.hex) === Number(chainId);\n  });\n};\nexport var requestSwitchNetwork = function requestSwitchNetwork() {\n  window.ethereum.request({\n    method: 'wallet_addEthereumChain',\n    params: [{\n      chainId: '0x89',\n      chainName: 'Matic Main Network',\n      rpcUrls: ['https://matic-mainnet.chainstacklabs.com'],\n      blockExplorerUrls: ['https://explorer-mainnet.maticvigil.com']\n    }]\n  }).then(function (res) {\n    console.log(res);\n  }).catch(function (err) {\n    console.log(err);\n  });\n};\nexport var getAPIUrlByChainId = function getAPIUrlByChainId(chainId) {\n  var network = getEnabledNetworkByChainId(chainId);\n\n  if (!network || !config.API_URLS[network.alias]) {\n    return config.API_URLS[config.DEFAULT_NETWORK];\n  }\n\n  return config.API_URLS[network.alias];\n};\nexport var getDefaultNetworkChainId = function getDefaultNetworkChainId() {\n  var network = AVAILABLE_NETWORKS.find(function (net) {\n    return net.alias === config.DEFAULT_NETWORK;\n  });\n\n  if (!network) {\n    throw new Error('Invalid DEFAULT_NETWORK: getDefaultNetworkChainId');\n  }\n\n  return network.hex;\n};\nexport var getWSUrlByChainId = function getWSUrlByChainId(chainId) {\n  var url = getAPIUrlByChainId(chainId);\n\n  if (!url) {\n    throw new Error('Invalid chainId: getWSUrlByChainId');\n  }\n\n  return url.replace('http', 'ws');\n};\nvar ERC20TokenAddresses = {\n  mona: config.MONA_TOKEN_ADDRESSES,\n  bnt: config.BANCOR_ADDRESSES,\n  usdt: config.USDT_ADDRESS,\n  weth: config.WETH_ADDRESS,\n  dai: config.DAI_ADDRESS,\n  w3f: config.W3F_ADDRESS,\n  matic: config.MATIC_ADDRESS\n};\nexport var getERC20ContractAddressByChainId = function getERC20ContractAddressByChainId(tokenId, chainId) {\n  var network = getEnabledNetworkByChainId(chainId);\n  console.log('tokenId:', tokenId);\n  console.log('ERC20TokenAddresses[bnt]:', ERC20TokenAddresses);\n  if (!Object.keys(ERC20TokenAddresses).find(function (key) {\n    return key == tokenId;\n  })) return null;\n  return ERC20TokenAddresses[tokenId][network === null || network === void 0 ? void 0 : network.alias].toLowerCase();\n};","map":{"version":3,"names":["AVAILABLE_NETWORKS","config","getEnabledNetworks","filter","network","NETWORKS","includes","alias","getEnabledNetworkByChainId","chainId","find","Number","hex","requestSwitchNetwork","window","ethereum","request","method","params","chainName","rpcUrls","blockExplorerUrls","then","res","console","log","catch","err","getAPIUrlByChainId","API_URLS","DEFAULT_NETWORK","getDefaultNetworkChainId","net","Error","getWSUrlByChainId","url","replace","ERC20TokenAddresses","mona","MONA_TOKEN_ADDRESSES","bnt","BANCOR_ADDRESSES","usdt","USDT_ADDRESS","weth","WETH_ADDRESS","dai","DAI_ADDRESS","w3f","W3F_ADDRESS","matic","MATIC_ADDRESS","getERC20ContractAddressByChainId","tokenId","Object","keys","key","toLowerCase"],"sources":["/Volumes/Data/Work/Digitalax/PFPMint/src/services/network.service.js"],"sourcesContent":["import { AVAILABLE_NETWORKS } from '@constants/networks.constants';\nimport config from '@utils/config';\n\nexport const getEnabledNetworks = () =>\n  AVAILABLE_NETWORKS.filter((network) => config.NETWORKS.includes(network.alias));\n\nexport const getEnabledNetworkByChainId = (chainId) => \n  getEnabledNetworks().find((network) => Number(network.hex) === Number(chainId));\n\nexport const requestSwitchNetwork = () => {\n  window.ethereum\n    .request({\n      method: 'wallet_addEthereumChain',\n      params: [\n        {\n          chainId: '0x89',\n          chainName: 'Matic Main Network',\n          rpcUrls: ['https://matic-mainnet.chainstacklabs.com'],\n          blockExplorerUrls: ['https://explorer-mainnet.maticvigil.com']\n        }\n      ]\n    })\n    .then((res) => {\n      console.log(res)\n    })\n    .catch((err) => {\n      console.log(err)\n    })\n\n  }\nexport const getAPIUrlByChainId = (chainId) => {\n  const network = getEnabledNetworkByChainId(chainId);\n\n  if (!network || !config.API_URLS[network.alias]) {\n    return config.API_URLS[config.DEFAULT_NETWORK];\n  }\n\n  return config.API_URLS[network.alias];\n};\n\n\nexport const getDefaultNetworkChainId = () => {\n  const network = AVAILABLE_NETWORKS.find((net) => net.alias === config.DEFAULT_NETWORK);\n\n  if (!network) {\n    throw new Error('Invalid DEFAULT_NETWORK: getDefaultNetworkChainId');\n  }\n\n  return network.hex;\n};\n\nexport const getWSUrlByChainId = (chainId) => {\n  const url = getAPIUrlByChainId(chainId);\n\n  if (!url) {\n    throw new Error('Invalid chainId: getWSUrlByChainId');\n  }\n\n  return url.replace('http', 'ws');\n};\n\nconst ERC20TokenAddresses = {\n  mona: config.MONA_TOKEN_ADDRESSES,\n  bnt: config.BANCOR_ADDRESSES,\n  usdt: config.USDT_ADDRESS,\n  weth: config.WETH_ADDRESS,\n  dai: config.DAI_ADDRESS,\n  w3f: config.W3F_ADDRESS,\n  matic: config.MATIC_ADDRESS\n}\n\nexport const getERC20ContractAddressByChainId = (tokenId, chainId) => {\n  const network = getEnabledNetworkByChainId(chainId)\n  console.log('tokenId:', tokenId)\n  console.log('ERC20TokenAddresses[bnt]:', ERC20TokenAddresses)\n  if (!Object.keys(ERC20TokenAddresses).find(key => key == tokenId)) return null\n  return ERC20TokenAddresses[tokenId][network?.alias].toLowerCase()\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}