{"ast":null,"code":"import { NEXT_REDUX_STORE } from '@constants/global.constants';\nimport configureStore from '../store';\nvar isServer = false;\nexport default function getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return configureStore(initialState);\n  } // Create store if unavailable on the client and set it on the window object\n\n\n  if (!window[NEXT_REDUX_STORE]) {\n    window[NEXT_REDUX_STORE] = configureStore(initialState);\n  }\n\n  return window[NEXT_REDUX_STORE];\n}","map":{"version":3,"names":["NEXT_REDUX_STORE","configureStore","isServer","getOrCreateStore","initialState","window"],"sources":["/Volumes/Data/Work/Digitalax/PFPMint/src/lib/with-redux-store.js"],"sourcesContent":["import { NEXT_REDUX_STORE } from '@constants/global.constants';\n\nimport configureStore from '../store';\n\nconst isServer = typeof window === 'undefined';\n\nexport default function getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return configureStore(initialState);\n  }\n\n  // Create store if unavailable on the client and set it on the window object\n  if (!window[NEXT_REDUX_STORE]) {\n    window[NEXT_REDUX_STORE] = configureStore(initialState);\n  }\n  return window[NEXT_REDUX_STORE];\n}\n"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,6BAAjC;AAEA,OAAOC,cAAP,MAA2B,UAA3B;AAEA,IAAMC,QAAQ,QAAd;AAEA,eAAe,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;EACrD;EACA,IAAIF,QAAJ,EAAc;IACZ,OAAOD,cAAc,CAACG,YAAD,CAArB;EACD,CAJoD,CAMrD;;;EACA,IAAI,CAACC,MAAM,CAACL,gBAAD,CAAX,EAA+B;IAC7BK,MAAM,CAACL,gBAAD,CAAN,GAA2BC,cAAc,CAACG,YAAD,CAAzC;EACD;;EACD,OAAOC,MAAM,CAACL,gBAAD,CAAb;AACD"},"metadata":{},"sourceType":"module"}