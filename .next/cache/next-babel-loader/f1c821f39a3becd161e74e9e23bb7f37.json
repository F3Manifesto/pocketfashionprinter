{"ast":null,"code":"import BaseActions from '@actions/base-actions';\nimport userActions from '@actions/user.actions';\nimport globalReducer from '@reducers/global.reducer';\nimport { isMetamaskInstalled } from '@services/metamask.service';\nimport { getDefaultNetworkChainId, getEnabledNetworkByChainId, getAPIUrlByChainId, getWSUrlByChainId } from '@services/network.service';\nimport api from '@services/api/api.service';\nimport ws from '@services/api/ws.service';\nimport { STORAGE_IS_LOGGED_IN } from '@constants/storage.constants';\n\nclass GlobalActions extends BaseActions {\n  initApp() {\n    return async dispatch => {\n      /**\n       * Check installed Metamask\n       */\n      if (!isMetamaskInstalled()) {\n        dispatch(this.changeNetwork(getDefaultNetworkChainId()));\n        dispatch(this.setValue('isInitialized', true));\n        return;\n      }\n\n      const {\n        ethereum\n      } = window;\n      /**\n       * Init subscribers\n       */\n\n      ethereum.on('accountsChanged', accounts => {\n        const [account] = accounts;\n\n        if (localStorage.getItem(STORAGE_IS_LOGGED_IN)) {\n          dispatch(userActions.setValue('account', account || null));\n          localStorage.setItem(STORAGE_IS_LOGGED_IN, 1);\n        }\n      });\n\n      if (ethereum.selectedAddress && localStorage.getItem(STORAGE_IS_LOGGED_IN)) {\n        dispatch(userActions.setValue('account', ethereum.selectedAddress));\n      }\n\n      ethereum.on('chainChanged', async chainId => {\n        if (!chainId) {\n          return;\n        }\n\n        dispatch(this.changeNetwork(chainId));\n\n        if (getEnabledNetworkByChainId(chainId)) {} else {\n          console.error('Wrong network. Contracts are not deployed yet');\n        }\n      });\n      dispatch(this.changeNetwork(ethereum.chainId));\n      dispatch(this.setValue('isInitialized', true));\n    };\n  }\n\n  changeNetwork(chainId) {\n    return async dispatch => {\n      const url = getAPIUrlByChainId(chainId);\n      const wsUrl = getWSUrlByChainId(chainId);\n      console.log({\n        url\n      });\n      api.setUrl(url);\n      ws.setUrl(wsUrl);\n      dispatch(this.setValue('chainId', chainId));\n    };\n  }\n\n  setAllUsers(values) {\n    return dispatch => {\n      dispatch(this.setValue('allUsers', values));\n    };\n  }\n\n}\n\nexport default new GlobalActions(globalReducer);","map":{"version":3,"names":["BaseActions","userActions","globalReducer","isMetamaskInstalled","getDefaultNetworkChainId","getEnabledNetworkByChainId","getAPIUrlByChainId","getWSUrlByChainId","api","ws","STORAGE_IS_LOGGED_IN","GlobalActions","initApp","dispatch","changeNetwork","setValue","ethereum","window","on","accounts","account","localStorage","getItem","setItem","selectedAddress","chainId","console","error","url","wsUrl","log","setUrl","setAllUsers","values"],"sources":["/Volumes/Data/Work/Digitalax/PFPMint/src/actions/global.actions.js"],"sourcesContent":["import BaseActions from '@actions/base-actions'\nimport userActions from '@actions/user.actions'\nimport globalReducer from '@reducers/global.reducer'\nimport { isMetamaskInstalled } from '@services/metamask.service'\nimport {\n  getDefaultNetworkChainId,\n  getEnabledNetworkByChainId,\n  getAPIUrlByChainId,\n  getWSUrlByChainId,\n} from '@services/network.service'\n\nimport api from '@services/api/api.service'\nimport ws from '@services/api/ws.service'\n\nimport { STORAGE_IS_LOGGED_IN } from '@constants/storage.constants'\n\nclass GlobalActions extends BaseActions {\n\n  initApp() {\n    return async (dispatch) => {\n      /**\n       * Check installed Metamask\n       */\n      if (!isMetamaskInstalled()) {\n        dispatch(this.changeNetwork(getDefaultNetworkChainId()))\n        dispatch(this.setValue('isInitialized', true))\n        return\n      }\n\n      const { ethereum } = window\n      /**\n       * Init subscribers\n       */\n      ethereum.on('accountsChanged', (accounts) => {\n        const [account] = accounts\n        if (localStorage.getItem(STORAGE_IS_LOGGED_IN)) {\n          dispatch(userActions.setValue('account', account || null))\n          localStorage.setItem(STORAGE_IS_LOGGED_IN, 1)\n        }\n      })\n\n      if (\n        ethereum.selectedAddress\n        && localStorage.getItem(STORAGE_IS_LOGGED_IN)\n      ) {\n        dispatch(userActions.setValue('account', ethereum.selectedAddress))\n      }\n\n      ethereum.on('chainChanged', async (chainId) => {\n        if (!chainId) {\n          return\n        }\n\n        dispatch(this.changeNetwork(chainId))\n\n        if (getEnabledNetworkByChainId(chainId)) {\n\n        } else {\n          console.error('Wrong network. Contracts are not deployed yet')\n        }\n      })\n      \n      dispatch(this.changeNetwork(ethereum.chainId))\n      dispatch(this.setValue('isInitialized', true))\n\n    }\n  }\n\n  changeNetwork(chainId) {\n    return async (dispatch) => {\n      const url = getAPIUrlByChainId(chainId)\n      const wsUrl = getWSUrlByChainId(chainId)\n\n      console.log({url})\n\n      api.setUrl(url)\n      ws.setUrl(wsUrl)\n      dispatch(this.setValue('chainId', chainId))\n    }\n  }\n\n  setAllUsers(values) {\n    return (dispatch) => {\n      dispatch(this.setValue('allUsers', values));\n    };\n  }\n\n}\n\nexport default new GlobalActions(globalReducer)\n"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,uBAAxB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,SAASC,mBAAT,QAAoC,4BAApC;AACA,SACEC,wBADF,EAEEC,0BAFF,EAGEC,kBAHF,EAIEC,iBAJF,QAKO,2BALP;AAOA,OAAOC,GAAP,MAAgB,2BAAhB;AACA,OAAOC,EAAP,MAAe,0BAAf;AAEA,SAASC,oBAAT,QAAqC,8BAArC;;AAEA,MAAMC,aAAN,SAA4BX,WAA5B,CAAwC;EAEtCY,OAAO,GAAG;IACR,OAAO,MAAOC,QAAP,IAAoB;MACzB;AACN;AACA;MACM,IAAI,CAACV,mBAAmB,EAAxB,EAA4B;QAC1BU,QAAQ,CAAC,KAAKC,aAAL,CAAmBV,wBAAwB,EAA3C,CAAD,CAAR;QACAS,QAAQ,CAAC,KAAKE,QAAL,CAAc,eAAd,EAA+B,IAA/B,CAAD,CAAR;QACA;MACD;;MAED,MAAM;QAAEC;MAAF,IAAeC,MAArB;MACA;AACN;AACA;;MACMD,QAAQ,CAACE,EAAT,CAAY,iBAAZ,EAAgCC,QAAD,IAAc;QAC3C,MAAM,CAACC,OAAD,IAAYD,QAAlB;;QACA,IAAIE,YAAY,CAACC,OAAb,CAAqBZ,oBAArB,CAAJ,EAAgD;UAC9CG,QAAQ,CAACZ,WAAW,CAACc,QAAZ,CAAqB,SAArB,EAAgCK,OAAO,IAAI,IAA3C,CAAD,CAAR;UACAC,YAAY,CAACE,OAAb,CAAqBb,oBAArB,EAA2C,CAA3C;QACD;MACF,CAND;;MAQA,IACEM,QAAQ,CAACQ,eAAT,IACGH,YAAY,CAACC,OAAb,CAAqBZ,oBAArB,CAFL,EAGE;QACAG,QAAQ,CAACZ,WAAW,CAACc,QAAZ,CAAqB,SAArB,EAAgCC,QAAQ,CAACQ,eAAzC,CAAD,CAAR;MACD;;MAEDR,QAAQ,CAACE,EAAT,CAAY,cAAZ,EAA4B,MAAOO,OAAP,IAAmB;QAC7C,IAAI,CAACA,OAAL,EAAc;UACZ;QACD;;QAEDZ,QAAQ,CAAC,KAAKC,aAAL,CAAmBW,OAAnB,CAAD,CAAR;;QAEA,IAAIpB,0BAA0B,CAACoB,OAAD,CAA9B,EAAyC,CAExC,CAFD,MAEO;UACLC,OAAO,CAACC,KAAR,CAAc,+CAAd;QACD;MACF,CAZD;MAcAd,QAAQ,CAAC,KAAKC,aAAL,CAAmBE,QAAQ,CAACS,OAA5B,CAAD,CAAR;MACAZ,QAAQ,CAAC,KAAKE,QAAL,CAAc,eAAd,EAA+B,IAA/B,CAAD,CAAR;IAED,CA9CD;EA+CD;;EAEDD,aAAa,CAACW,OAAD,EAAU;IACrB,OAAO,MAAOZ,QAAP,IAAoB;MACzB,MAAMe,GAAG,GAAGtB,kBAAkB,CAACmB,OAAD,CAA9B;MACA,MAAMI,KAAK,GAAGtB,iBAAiB,CAACkB,OAAD,CAA/B;MAEAC,OAAO,CAACI,GAAR,CAAY;QAACF;MAAD,CAAZ;MAEApB,GAAG,CAACuB,MAAJ,CAAWH,GAAX;MACAnB,EAAE,CAACsB,MAAH,CAAUF,KAAV;MACAhB,QAAQ,CAAC,KAAKE,QAAL,CAAc,SAAd,EAAyBU,OAAzB,CAAD,CAAR;IACD,CATD;EAUD;;EAEDO,WAAW,CAACC,MAAD,EAAS;IAClB,OAAQpB,QAAD,IAAc;MACnBA,QAAQ,CAAC,KAAKE,QAAL,CAAc,UAAd,EAA0BkB,MAA1B,CAAD,CAAR;IACD,CAFD;EAGD;;AArEqC;;AAyExC,eAAe,IAAItB,aAAJ,CAAkBT,aAAlB,CAAf"},"metadata":{},"sourceType":"module"}