{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { formatEther } from '@ethersproject/units';\nimport { getAccount } from '@selectors/user.selectors';\nimport { getChainId } from '@selectors/global.selectors';\nimport { getSelectedCrypto, getTicketPrice } from '@selectors/crypto.selectors';\nimport { getERC20TokenContract } from '@services/contract.service';\nimport config from '@utils/config';\nimport { POLYGON_CHAINID } from '@constants/global.constants';\nimport { useIsMainnet } from './useIsMainnet';\nimport usePollar from './usePollar';\nexport function useTokenAllowance() {\n  _s();\n\n  var _useState = useState('0'),\n      allowance = _useState[0],\n      setAllowance = _useState[1];\n\n  var account = useSelector(getAccount);\n  var isMainnet = useIsMainnet();\n  var chainId = useSelector(getChainId);\n  var selectedCrypto = useSelector(getSelectedCrypto);\n  var selectedCryptoRef = useRef(selectedCrypto);\n  selectedCryptoRef.current = selectedCrypto;\n  var targetAddress = config.PAYMENT_ACCEPT['matic'];\n  var fetchAllowance = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var contract;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(account && chainId && chainId == POLYGON_CHAINID)) {\n              _context.next = 28;\n              break;\n            }\n\n            if (!(selectedCryptoRef.current === 'matic')) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.t0 = setAllowance;\n            _context.next = 5;\n            return '10000000000';\n\n          case 5:\n            _context.t1 = _context.sent;\n            (0, _context.t0)(_context.t1);\n            _context.next = 28;\n            break;\n\n          case 9:\n            _context.next = 11;\n            return getERC20TokenContract(selectedCryptoRef.current, chainId);\n\n          case 11:\n            contract = _context.sent;\n            _context.prev = 12;\n            _context.t2 = contract;\n\n            if (!_context.t2) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.t3 = setAllowance;\n            _context.t4 = formatEther;\n            _context.next = 19;\n            return contract.methods.allowance(account, targetAddress).call({\n              from: account\n            });\n\n          case 19:\n            _context.t5 = _context.sent;\n            _context.t6 = (0, _context.t4)(_context.t5);\n            (0, _context.t3)(_context.t6);\n\n          case 22:\n            _context.next = 28;\n            break;\n\n          case 24:\n            _context.prev = 24;\n            _context.t7 = _context[\"catch\"](12);\n            console.log({\n              e: _context.t7\n            });\n            throw _context.t7;\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[12, 24]]);\n  })), [account, chainId]);\n  fetchAllowance();\n  usePollar(fetchAllowance);\n  return allowance;\n}\n\n_s(useTokenAllowance, \"5xfK2w0rxnYeerx2gmeg61b3BWY=\", false, function () {\n  return [useSelector, useIsMainnet, useSelector, useSelector, usePollar];\n});\n\nexport default function useERC20Approve(amount) {\n  _s2();\n\n  var account = useSelector(getAccount);\n  var chainId = useSelector(getChainId);\n  var selectedCrypto = useSelector(getSelectedCrypto);\n  console.log('config2: ', config);\n  var targetAddress = config.PAYMENT_ACCEPT['matic'];\n\n  var _useState2 = useState(false),\n      approved = _useState2[0],\n      setApproved = _useState2[1];\n\n  var allowance = useTokenAllowance();\n  useEffect(function () {\n    console.log('allowance: ', parseFloat(allowance));\n    console.log('amount: ', parseFloat(amount));\n\n    if (selectedCrypto && parseFloat(allowance) >= 10000000000) {\n      setApproved(true);\n    } else {\n      setApproved(false);\n    }\n  }, [amount, allowance, selectedCrypto]);\n  var isMainnet = useIsMainnet();\n  var selectedCryptoRef = useRef(selectedCrypto);\n  selectedCryptoRef.current = selectedCrypto;\n\n  var approveFunc = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var contract;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(account && chainId)) {\n                _context2.next = 15;\n                break;\n              }\n\n              _context2.next = 3;\n              return getERC20TokenContract(selectedCryptoRef.current, chainId);\n\n            case 3:\n              contract = _context2.sent;\n              _context2.prev = 4;\n              _context2.t0 = contract;\n\n              if (!_context2.t0) {\n                _context2.next = 9;\n                break;\n              }\n\n              _context2.next = 9;\n              return contract.methods.approve(targetAddress, amount).send({\n                from: account\n              });\n\n            case 9:\n              _context2.next = 15;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t1 = _context2[\"catch\"](4);\n              console.log({\n                e: _context2.t1\n              });\n              throw _context2.t1;\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[4, 11]]);\n    }));\n\n    return function approveFunc() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // sendAmount should be calculated as actual price before calling this function\n\n\n  var sendCrypto = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(sendAmount) {\n      var contract, listener, promise;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return getERC20TokenContract(selectedCryptoRef.current, chainId);\n\n            case 2:\n              contract = _context3.sent;\n              _context3.prev = 3;\n              listener = contract.methods.transfer(targetAddress, sendAmount).send({\n                from: account\n              });\n              promise = new Promise(function (resolve, reject) {\n                listener.on('error', function (error) {\n                  return reject(error);\n                });\n                listener.on('confirmation', function (transactionHash) {\n                  return resolve(transactionHash);\n                });\n              });\n              console.log('listener: ', listener);\n              return _context3.abrupt(\"return\", {\n                promise: promise,\n                unsubscribe: function unsubscribe() {\n                  listener.off('error');\n                  listener.off('confirmation');\n                }\n              });\n\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](3);\n              console.log({\n                e: _context3.t0\n              });\n              throw _context3.t0;\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[3, 10]]);\n    }));\n\n    return function sendCrypto(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  console.log('selectedCrypto: ', selectedCrypto);\n  console.log('approved: ', approved);\n  return {\n    approved: approved,\n    approveFunc: approveFunc,\n    sendCrypto: sendCrypto\n  };\n}\n\n_s2(useERC20Approve, \"1FagXj4/i38V+x7H5CdQvV8Xc+s=\", false, function () {\n  return [useSelector, useSelector, useSelector, useTokenAllowance, useIsMainnet];\n});","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","useSelector","formatEther","getAccount","getChainId","getSelectedCrypto","getTicketPrice","getERC20TokenContract","config","POLYGON_CHAINID","useIsMainnet","usePollar","useTokenAllowance","allowance","setAllowance","account","isMainnet","chainId","selectedCrypto","selectedCryptoRef","current","targetAddress","PAYMENT_ACCEPT","fetchAllowance","contract","methods","call","from","console","log","e","useERC20Approve","amount","approved","setApproved","parseFloat","approveFunc","approve","send","sendCrypto","sendAmount","listener","transfer","promise","Promise","resolve","reject","on","error","transactionHash","unsubscribe","off"],"sources":["/Volumes/Data/Work/Digitalax/PFPMint/src/hooks/useERC20Approve.js"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { formatEther } from '@ethersproject/units'\n\nimport { getAccount } from '@selectors/user.selectors'\nimport { getChainId } from '@selectors/global.selectors'\nimport {\n  getSelectedCrypto,\n  getTicketPrice\n} from '@selectors/crypto.selectors'\n\nimport {\n  getERC20TokenContract\n} from '@services/contract.service'\n\nimport config from '@utils/config'\n\nimport { POLYGON_CHAINID } from '@constants/global.constants'\n\nimport { useIsMainnet } from './useIsMainnet'\nimport usePollar from './usePollar'\n\nexport function useTokenAllowance() {\n  const [allowance, setAllowance] = useState('0')\n  const account = useSelector(getAccount)\n  const isMainnet = useIsMainnet()\n  const chainId = useSelector(getChainId)\n  const selectedCrypto = useSelector(getSelectedCrypto)\n\n  const selectedCryptoRef = useRef(selectedCrypto)\n  selectedCryptoRef.current = selectedCrypto\n\n  const targetAddress = config.PAYMENT_ACCEPT['matic']\n\n  const fetchAllowance = useCallback(async () => {\n    // Only Polygon is acceptable\n    // Currently we support only Mona and wEth tokens\n    if (account && chainId && chainId == POLYGON_CHAINID) {\n\n      if (selectedCryptoRef.current === 'matic') {\n        setAllowance(await '10000000000')\n      } else {\n        // get ERC20 Token contract\n        const contract = await getERC20TokenContract(selectedCryptoRef.current, chainId)\n\n        try {\n          contract && setAllowance(\n            formatEther(\n              await contract.methods.allowance(account, targetAddress).call({ from: account })\n            )\n          )\n        } catch (e) {\n          console.log({ e });\n          throw e;\n        }\n      }\n    }\n  }, [account, chainId])\n\n  fetchAllowance()\n  usePollar(fetchAllowance)\n\n  return allowance\n}\n\nexport default function useERC20Approve(amount) {\n  const account = useSelector(getAccount)\n  const chainId = useSelector(getChainId)\n  const selectedCrypto = useSelector(getSelectedCrypto)\n  console.log('config2: ', config)\n  const targetAddress = config.PAYMENT_ACCEPT['matic']\n\n  const [approved, setApproved] = useState(false)\n\n  const allowance = useTokenAllowance()\n\n  useEffect(() => {\n    console.log('allowance: ', parseFloat(allowance))\n    console.log('amount: ', parseFloat(amount))\n\n    if (selectedCrypto && parseFloat(allowance) >= 10000000000) {\n      setApproved(true)\n    } else {\n      setApproved(false)\n    }\n  }, [amount, allowance, selectedCrypto])\n\n  const isMainnet = useIsMainnet()\n\n  const selectedCryptoRef = useRef(selectedCrypto)\n  selectedCryptoRef.current = selectedCrypto\n\n  const approveFunc = async () => {\n    if (account && chainId) {\n      // get ERC20 Token contract\n      const contract = await getERC20TokenContract(selectedCryptoRef.current, chainId)\n\n      try {\n        contract && await contract.methods.approve(targetAddress, amount).send({ from: account });\n      } catch (e) {\n        console.log({ e });\n        throw e;\n      }      \n    }\n  }\n\n  // sendAmount should be calculated as actual price before calling this function\n\n  const sendCrypto = async (sendAmount) => {\n    // if (\n    //   selectedCrypto != 'mona' && \n    //   selectedCrypto != 'weth' && \n    //   selectedCrypto != 'usdt' && \n    //   selectedCrypto != 'w3f' && \n    //   selectedCrypto != 'matic' && \n    //   selectedCrypto != 'dai'\n    // ) return\n\n    const contract = await getERC20TokenContract(selectedCryptoRef.current, chainId)\n\n    try {\n      const listener = contract.methods\n        .transfer(targetAddress, sendAmount)\n        .send({ from: account })\n\n      const promise = new Promise((resolve, reject) => {\n        listener.on('error', (error) => reject(error))\n        listener.on('confirmation', (transactionHash) => resolve(transactionHash))\n      })\n\n      console.log('listener: ', listener)\n  \n      return {\n        promise,\n        unsubscribe: () => {\n          listener.off('error')\n          listener.off('confirmation')\n        },\n      }\n    } catch (e) {\n      console.log({ e })\n      throw e\n    }\n  }\n\n  console.log('selectedCrypto: ', selectedCrypto)\n  console.log('approved: ', approved)\n  return { approved, approveFunc, sendCrypto }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}