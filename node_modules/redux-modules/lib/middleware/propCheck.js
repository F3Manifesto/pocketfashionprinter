'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = propCheck;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var defaultOnError = function defaultOnError(err) {
  // eslint-disable-next-line no-console
  console.error('Warning: Failed payloadType:', err);
};

function propCheck(payloadTypes) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return function (_ref) {
    var payload = _ref.payload,
        meta = _ref.meta,
        type = _ref.type,
        rest = _objectWithoutProperties(_ref, ['payload', 'meta', 'type']);

    var _params$onError = params.onError,
        onError = _params$onError === undefined ? defaultOnError : _params$onError;


    if (process.env.NODE_ENV === 'production') {
      return _extends({
        payload: payload,
        meta: meta,
        type: type
      }, rest);
    }

    if (!payloadTypes) {
      return _extends({
        payload: payload,
        meta: meta,
        type: type
      }, rest);
    }

    if (typeof payloadTypes === 'function') {
      _propTypes2.default.checkPropTypes({ payload: payloadTypes }, { payload: payload }, '', type, function () {
        return onError(type);
      });
    } else {
      _propTypes2.default.checkPropTypes(payloadTypes, payload, '', type, function () {
        return onError(type);
      });
    }

    return _extends({
      payload: payload,
      meta: meta,
      type: type
    }, rest);
  };
}