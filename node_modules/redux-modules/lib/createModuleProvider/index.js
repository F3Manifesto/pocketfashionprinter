'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = createModuleProvider;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _registerModule = require('./registerModule');

var _registerModule2 = _interopRequireDefault(_registerModule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function createModuleProvider() {
  var _class, _temp;

  var buildReducer = arguments.length <= 0 || arguments[0] === undefined ? _redux.combineReducers : arguments[0];
  var ModuleProvider = (_temp = _class = function (_React$Component) {
    _inherits(ModuleProvider, _React$Component);

    function ModuleProvider(props, context) {
      _classCallCheck(this, ModuleProvider);

      // <Provider> does not support changing "store", so "store" should always be the same instance

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ModuleProvider).call(this, props, context));

      _this.registerModule = (0, _registerModule2.default)(buildReducer, props.store);
      return _this;
    }

    _createClass(ModuleProvider, [{
      key: 'getChildContext',
      value: function getChildContext() {
        return {
          registerModule: this.registerModule
        };
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props;
        var store = _props.store;
        var children = _props.children;

        return _react2.default.createElement(
          _reactRedux.Provider,
          { store: store },
          children
        );
      }
    }]);

    return ModuleProvider;
  }(_react2.default.Component), _class.propTypes = {
    // Alternatively, you could pull "storeShape" from "react-redux"
    store: _react.PropTypes.shape({
      subscribe: _react.PropTypes.func.isRequired,
      dispatch: _react.PropTypes.func.isRequired,
      getState: _react.PropTypes.func.isRequired
    }),
    children: _react.PropTypes.element.isRequired
  }, _class.childContextTypes = {
    registerModule: _react.PropTypes.func
  }, _temp);


  return ModuleProvider;
}